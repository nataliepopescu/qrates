(function() {var implementors = {};
implementors["aho_corasick"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["base64"] = [{"text":"impl Error for DecodeError","synthetic":false,"types":[]}];
implementors["bincode"] = [{"text":"impl Error for ErrorKind","synthetic":false,"types":[]}];
implementors["bstr"] = [{"text":"impl Error for FromUtf8Error","synthetic":false,"types":[]},{"text":"impl Error for Utf8Error","synthetic":false,"types":[]}];
implementors["cargo"] = [{"text":"impl Error for ConfigError","synthetic":false,"types":[]}];
implementors["cargo_platform"] = [{"text":"impl Error for ParseError","synthetic":false,"types":[]}];
implementors["chrono"] = [{"text":"impl Error for ParseError","synthetic":false,"types":[]}];
implementors["clap"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["cookie"] = [{"text":"impl Error for ParseError","synthetic":false,"types":[]}];
implementors["cookie_store"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["crates_index"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["crossbeam_channel"] = [{"text":"impl&lt;T:&nbsp;Send&gt; Error for SendError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Error for TrySendError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Error for SendTimeoutError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Error for RecvError","synthetic":false,"types":[]},{"text":"impl Error for TryRecvError","synthetic":false,"types":[]},{"text":"impl Error for RecvTimeoutError","synthetic":false,"types":[]},{"text":"impl Error for TrySelectError","synthetic":false,"types":[]},{"text":"impl Error for SelectTimeoutError","synthetic":false,"types":[]}];
implementors["crossbeam_queue"] = [{"text":"impl Error for PopError","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Error for PushError&lt;T&gt;","synthetic":false,"types":[]}];
implementors["csv"] = [{"text":"impl Error for DeserializeError","synthetic":false,"types":[]},{"text":"impl Error for Error","synthetic":false,"types":[]},{"text":"impl Error for FromUtf8Error","synthetic":false,"types":[]},{"text":"impl Error for Utf8Error","synthetic":false,"types":[]},{"text":"impl&lt;W:&nbsp;Any&gt; Error for IntoInnerError&lt;W&gt;","synthetic":false,"types":[]}];
implementors["curl"] = [{"text":"impl Error for Error","synthetic":false,"types":[]},{"text":"impl Error for ShareError","synthetic":false,"types":[]},{"text":"impl Error for MultiError","synthetic":false,"types":[]},{"text":"impl Error for FormError","synthetic":false,"types":[]}];
implementors["darling_core"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["either"] = [{"text":"impl&lt;L, R&gt; Error for Either&lt;L, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Error,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Error,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["error_chain"] = [{"text":"impl Error for Error","synthetic":false,"types":[]},{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["failure"] = [{"text":"impl&lt;E:&nbsp;Display + Debug&gt; Error for Compat&lt;E&gt;","synthetic":false,"types":[]}];
implementors["flate2"] = [{"text":"impl Error for DecompressError","synthetic":false,"types":[]},{"text":"impl Error for CompressError","synthetic":false,"types":[]}];
implementors["futures"] = [{"text":"impl&lt;E&gt; Error for SharedError&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Error,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Any&gt; Error for ReuniteError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Error for Canceled","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Any&gt; Error for SendError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Any&gt; Error for TrySendError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Any&gt; Error for SendError&lt;T&gt;","synthetic":false,"types":[]}];
implementors["futures_channel"] = [{"text":"impl Error for SendError","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Any&gt; Error for TrySendError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Error for TryRecvError","synthetic":false,"types":[]},{"text":"impl Error for Canceled","synthetic":false,"types":[]}];
implementors["futures_task"] = [{"text":"impl Error for SpawnError","synthetic":false,"types":[]}];
implementors["futures_util"] = [{"text":"impl Error for Aborted","synthetic":false,"types":[]}];
implementors["getrandom"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["gimli"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["git2"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["glob"] = [{"text":"impl Error for GlobError","synthetic":false,"types":[]},{"text":"impl Error for PatternError","synthetic":false,"types":[]}];
implementors["globset"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["goblin"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["h2"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["hex"] = [{"text":"impl Error for FromHexError","synthetic":false,"types":[]}];
implementors["http"] = [{"text":"impl Error for InvalidHeaderName","synthetic":false,"types":[]},{"text":"impl Error for InvalidHeaderNameBytes","synthetic":false,"types":[]},{"text":"impl Error for InvalidHeaderValue","synthetic":false,"types":[]},{"text":"impl Error for InvalidHeaderValueBytes","synthetic":false,"types":[]},{"text":"impl Error for ToStrError","synthetic":false,"types":[]},{"text":"impl Error for InvalidMethod","synthetic":false,"types":[]},{"text":"impl Error for InvalidStatusCode","synthetic":false,"types":[]},{"text":"impl Error for InvalidUri","synthetic":false,"types":[]},{"text":"impl Error for InvalidUriBytes","synthetic":false,"types":[]},{"text":"impl Error for InvalidUriParts","synthetic":false,"types":[]},{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["httparse"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["humantime"] = [{"text":"impl Error for Error","synthetic":false,"types":[]},{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["hyper"] = [{"text":"impl Error for InvalidNameError","synthetic":false,"types":[]},{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["ignore"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["log"] = [{"text":"impl Error for SetLoggerError","synthetic":false,"types":[]},{"text":"impl Error for ParseLevelError","synthetic":false,"types":[]}];
implementors["mime"] = [{"text":"impl Error for FromStrError","synthetic":false,"types":[]}];
implementors["native_tls"] = [{"text":"impl Error for Error","synthetic":false,"types":[]},{"text":"impl&lt;S&gt; Error for HandshakeError&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Any + Debug,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["nix"] = [{"text":"impl Error for Errno","synthetic":false,"types":[]},{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["opener"] = [{"text":"impl Error for OpenError","synthetic":false,"types":[]}];
implementors["openssl"] = [{"text":"impl Error for ErrorStack","synthetic":false,"types":[]},{"text":"impl Error for Error","synthetic":false,"types":[]},{"text":"impl Error for Error","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Debug&gt; Error for HandshakeError&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl Error for X509VerifyResult","synthetic":false,"types":[]}];
implementors["publicsuffix"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["rand"] = [{"text":"impl Error for BernoulliError","synthetic":false,"types":[]},{"text":"impl Error for WeightedError","synthetic":false,"types":[]},{"text":"impl Error for ReadError","synthetic":false,"types":[]}];
implementors["rand_core"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["rand_jitter"] = [{"text":"impl Error for TimerError","synthetic":false,"types":[]}];
implementors["regex"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["regex_syntax"] = [{"text":"impl Error for Error","synthetic":false,"types":[]},{"text":"impl Error for Error","synthetic":false,"types":[]},{"text":"impl Error for Error","synthetic":false,"types":[]},{"text":"impl Error for CaseFoldError","synthetic":false,"types":[]},{"text":"impl Error for UnicodeWordError","synthetic":false,"types":[]}];
implementors["reqwest"] = [{"text":"impl Error for Error","synthetic":false,"types":[]},{"text":"impl Error for CookieParseError","synthetic":false,"types":[]}];
implementors["scroll"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["semver"] = [{"text":"impl Error for SemVerError","synthetic":false,"types":[]},{"text":"impl Error for ReqParseError","synthetic":false,"types":[]}];
implementors["serde"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["serde_json"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["serde_urlencoded"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["simplelog"] = [{"text":"impl Error for TermLogError","synthetic":false,"types":[]}];
implementors["strsim"] = [{"text":"impl Error for StrSimError","synthetic":false,"types":[]}];
implementors["syn"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["tempfile"] = [{"text":"impl Error for PathPersistError","synthetic":false,"types":[]},{"text":"impl Error for PersistError","synthetic":false,"types":[]}];
implementors["term"] = [{"text":"impl Error for Error","synthetic":false,"types":[]},{"text":"impl Error for Error","synthetic":false,"types":[]},{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["termcolor"] = [{"text":"impl Error for ParseColorError","synthetic":false,"types":[]}];
implementors["time"] = [{"text":"impl Error for OutOfRangeError","synthetic":false,"types":[]},{"text":"impl Error for ParseError","synthetic":false,"types":[]}];
implementors["tokio"] = [{"text":"impl Error for FrameTooBig","synthetic":false,"types":[]}];
implementors["tokio_buf"] = [{"text":"impl Error for CollectVecError","synthetic":false,"types":[]},{"text":"impl Error for CollectBytesError","synthetic":false,"types":[]}];
implementors["tokio_current_thread"] = [{"text":"impl Error for RunError","synthetic":false,"types":[]},{"text":"impl Error for RunTimeoutError","synthetic":false,"types":[]},{"text":"impl Error for TurnError","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Debug&gt; Error for BlockError&lt;T&gt;","synthetic":false,"types":[]}];
implementors["tokio_executor"] = [{"text":"impl Error for EnterError","synthetic":false,"types":[]},{"text":"impl Error for SpawnError","synthetic":false,"types":[]}];
implementors["tokio_reactor"] = [{"text":"impl Error for SetFallbackError","synthetic":false,"types":[]}];
implementors["tokio_sync"] = [{"text":"impl Error for SendError","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Debug&gt; Error for TrySendError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Error for RecvError","synthetic":false,"types":[]},{"text":"impl Error for UnboundedSendError","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Debug&gt; Error for UnboundedTrySendError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Error for UnboundedRecvError","synthetic":false,"types":[]},{"text":"impl Error for RecvError","synthetic":false,"types":[]},{"text":"impl Error for TryRecvError","synthetic":false,"types":[]},{"text":"impl Error for AcquireError","synthetic":false,"types":[]},{"text":"impl Error for TryAcquireError","synthetic":false,"types":[]},{"text":"impl Error for RecvError","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Debug&gt; Error for SendError&lt;T&gt;","synthetic":false,"types":[]}];
implementors["tokio_threadpool"] = [{"text":"impl Error for BlockingError","synthetic":false,"types":[]},{"text":"impl Error for ParkError","synthetic":false,"types":[]}];
implementors["tokio_timer"] = [{"text":"impl&lt;T:&nbsp;StdError + 'static&gt; Error for ThrottleError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Error&gt; Error for Error&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["tokio_util"] = [{"text":"impl Error for LengthDelimitedCodecError","synthetic":false,"types":[]},{"text":"impl Error for LinesCodecError","synthetic":false,"types":[]}];
implementors["toml"] = [{"text":"impl Error for DatetimeParseError","synthetic":false,"types":[]},{"text":"impl Error for Error","synthetic":false,"types":[]},{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["try_from"] = [{"text":"impl Error for TryFromIntToCharError","synthetic":false,"types":[]},{"text":"impl Error for TryFromIntError","synthetic":false,"types":[]}];
implementors["url"] = [{"text":"impl Error for ParseError","synthetic":false,"types":[]}];
implementors["uuid"] = [{"text":"impl Error for ParseError","synthetic":false,"types":[]},{"text":"impl Error for BytesError","synthetic":false,"types":[]},{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["void"] = [{"text":"impl Error for Void","synthetic":false,"types":[]}];
implementors["walkdir"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["xattr"] = [{"text":"impl Error for UnsupportedPlatformError","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()