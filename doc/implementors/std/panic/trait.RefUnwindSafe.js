(function() {var implementors = {};
implementors["addr2line"] = [{"text":"impl&lt;R&nbsp;=&nbsp;EndianReader&lt;RunTimeEndian, Rc&lt;[u8]&gt;&gt;&gt; !RefUnwindSafe for Context&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ctx, R&gt; !RefUnwindSafe for FrameIter&lt;'ctx, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for Frame&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for FunctionName&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Location","synthetic":true,"types":[]}];
implementors["adler32"] = [{"text":"impl RefUnwindSafe for RollingAdler32","synthetic":true,"types":[]}];
implementors["aho_corasick"] = [{"text":"impl&lt;S&gt; RefUnwindSafe for AhoCorasick&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AhoCorasickBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, S&gt; RefUnwindSafe for FindIter&lt;'a, 'b, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, S&gt; RefUnwindSafe for FindOverlappingIter&lt;'a, 'b, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, S&gt; RefUnwindSafe for StreamFindIter&lt;'a, R, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Match","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MatchKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ErrorKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl&lt;'s, 'h&gt; RefUnwindSafe for FindIter&lt;'s, 'h&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Searcher","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MatchKind","synthetic":true,"types":[]}];
implementors["ansi_term"] = [{"text":"impl RefUnwindSafe for Prefix","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Infix","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Suffix","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Style","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized&gt; RefUnwindSafe for ANSIGenericString&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as ToOwned&gt;::Owned: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized&gt; RefUnwindSafe for ANSIGenericStrings&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as ToOwned&gt;::Owned: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Colour","synthetic":true,"types":[]}];
implementors["arc_swap"] = [{"text":"impl&lt;'l, T&gt; RefUnwindSafe for Guard&lt;'l, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; RefUnwindSafe for ArcSwapAny&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for DirectDeref&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for DynGuard&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;G, T&gt; RefUnwindSafe for MapGuard&lt;G, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;G: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, T, F&gt; RefUnwindSafe for Map&lt;A, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for ConstantDeref&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Constant&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, T&gt; RefUnwindSafe for Cache&lt;A, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, T, F&gt; RefUnwindSafe for MapCache&lt;A, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Shard","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Global","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PrivateUnsharded","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for PrivateSharded&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["backtrace"] = [{"text":"impl RefUnwindSafe for Frame","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Symbol","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SymbolName&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !RefUnwindSafe for BacktraceFmt&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'fmt, 'a, 'b&gt; !RefUnwindSafe for BacktraceFrameFmt&lt;'fmt, 'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Backtrace","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BacktraceFrame","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BacktraceSymbol","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for BytesOrWideString&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PrintFmt","synthetic":true,"types":[]}];
implementors["base64"] = [{"text":"impl RefUnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DecodeError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CharacterSet","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Base64Display&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; RefUnwindSafe for EncoderWriter&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["bincode"] = [{"text":"impl RefUnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ErrorKind","synthetic":true,"types":[]}];
implementors["bstr"] = [{"text":"impl RefUnwindSafe for BStr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BString","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Bytes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Fields&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, F&gt; RefUnwindSafe for FieldsWith&lt;'a, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Find&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for FindReverse&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Finder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for FinderReverse&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Lines&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for LinesWithTerminator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Split&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SplitN&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SplitNReverse&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SplitReverse&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for DrainBytes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FromUtf8Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for GraphemeIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Graphemes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SentenceIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Sentences&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for WordIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Words&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for WordsWithBreakIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for WordsWithBreaks&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for CharIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Chars&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Utf8Error","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; RefUnwindSafe for ByteLines&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["byteorder"] = [{"text":"impl RefUnwindSafe for BigEndian","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LittleEndian","synthetic":true,"types":[]}];
implementors["bytes"] = [{"text":"impl RefUnwindSafe for Bytes","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BytesMut","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; RefUnwindSafe for Chain&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Iter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; RefUnwindSafe for Reader&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Take&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; RefUnwindSafe for Writer&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["bytesize"] = [{"text":"impl RefUnwindSafe for ByteSize","synthetic":true,"types":[]}];
implementors["c2_chacha"] = [{"text":"impl RefUnwindSafe for ChaCha","synthetic":true,"types":[]},{"text":"impl&lt;V&gt; RefUnwindSafe for State&lt;V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["cargo"] = [{"text":"impl RefUnwindSafe for CommitInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CfgInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VersionInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InternedString","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PackageIdSpec","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Resolve","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SourceId","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'cfg&gt; !RefUnwindSafe for Members&lt;'a, 'cfg&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'cfg&gt; !RefUnwindSafe for Workspace&lt;'cfg&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WorkspaceRootConfig","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ResolveVersion","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GitReference","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WorkspaceConfig","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for BuildConfig","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'cfg&gt; !RefUnwindSafe for BuildContext&lt;'a, 'cfg&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TargetConfig","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TargetInfo","synthetic":true,"types":[]},{"text":"impl&lt;'cfg&gt; !RefUnwindSafe for Compilation&lt;'cfg&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Doctest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompileTarget","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'cfg&gt; !RefUnwindSafe for Context&lt;'a, 'cfg&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BuildOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BuildScripts","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for Unit&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for UnitInterner&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DefaultExecutor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompileMode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MessageFormat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ProfileKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FileFlavor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompileKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Freshness","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for UnitDep&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Dependency","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Kind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Features","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Feature","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CliUnstable","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Edition","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Manifest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DelayedWarning","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Warnings","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for VirtualManifest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ManifestMetadata","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Target","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for EitherManifest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LibKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TargetKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TargetSourcePath","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Package","synthetic":true,"types":[]},{"text":"impl&lt;'cfg&gt; !RefUnwindSafe for PackageSet&lt;'cfg&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'cfg&gt; !RefUnwindSafe for Downloads&lt;'a, 'cfg&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PackageId","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for PackageIdStableHash&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Profiles","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Profile","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnitFor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ConfigProfiles","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ProfileRoot","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Lto","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PanicStrategy","synthetic":true,"types":[]},{"text":"impl&lt;'cfg&gt; !RefUnwindSafe for PackageRegistry&lt;'cfg&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EncodableDependency","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EncodablePackageId","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EncodableResolve","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ResolveError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ResolveOpts","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ActivateError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Shell","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Verbosity","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ColorChoice","synthetic":true,"types":[]},{"text":"impl&lt;'src&gt; !RefUnwindSafe for SourceMap&lt;'src&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for MaybePackage","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Summary","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FeatureValue","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for CleanOptions&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for CompileOptions&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for DocOptions&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for FetchOptions&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for UpdateOptions&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NewOptions","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExportInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OutputMetadataOptions","synthetic":true,"types":[]},{"text":"impl&lt;'cfg&gt; !RefUnwindSafe for PackageOpts&lt;'cfg&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for TestOptions&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for FixOptions&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HttpTimeout","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OwnersOptions","synthetic":true,"types":[]},{"text":"impl&lt;'cfg&gt; !RefUnwindSafe for PublishOpts&lt;'cfg&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RegistryConfig","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for VendorOptions&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompileFilter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FilterRule","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LibRule","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Packages","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VersionControl","synthetic":true,"types":[]},{"text":"impl&lt;'cfg&gt; !RefUnwindSafe for GitSource&lt;'cfg&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'cfg&gt; !RefUnwindSafe for SourceConfigMap&lt;'cfg&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'cfg&gt; !RefUnwindSafe for DirectorySource&lt;'cfg&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for GitCheckout&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GitDatabase","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GitRemote","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GitRevision","synthetic":true,"types":[]},{"text":"impl&lt;'cfg&gt; !RefUnwindSafe for PathSource&lt;'cfg&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'cfg&gt; !RefUnwindSafe for RegistrySource&lt;'cfg&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RegistryConfig","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for RegistryPackage&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MaybeLock","synthetic":true,"types":[]},{"text":"impl&lt;'cfg&gt; !RefUnwindSafe for ReplacedSource&lt;'cfg&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CanonicalUrl","synthetic":true,"types":[]},{"text":"impl&lt;N, E, V&gt; RefUnwindSafe for DependencyQueue&lt;N, E, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FileLock","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Filesystem","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for LockServer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LockServerClient","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for LockServerStarted","synthetic":true,"types":[]},{"text":"impl&lt;'cfg&gt; !RefUnwindSafe for Progress&lt;'cfg&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sha256","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FossilRepo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GitRepo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HgRepo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PijulRepo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ProgressStyle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ProfileChecking","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CommandInfo","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Value&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ConfigRelativePath","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ConfigError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for PackageCacheLock&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CargoHttpConfig","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SslVersionConfigRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CargoNetConfig","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CargoBuildConfig","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StringList","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Definition","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ConfigValue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SslVersionConfig","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for State","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for DiagnosticPrinter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RustfixDiagnosticServer","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for StartedServer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Message","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HttpNot200","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Internal","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ManifestError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for ManifestCauses&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ProcessError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CargoTestError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for CliError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Test","synthetic":true,"types":[]},{"text":"impl&lt;N, E&gt; !RefUnwindSafe for Graph&lt;N, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for FromCompiler&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Artifact&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ArtifactProfile","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for BuildScript&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for TimingInfo&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for Retry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for PathAncestors&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ProcessBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Profiler","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rustc","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DetailedTomlDependency","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TomlManifest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TomlProfiles","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TomlOptLevel","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TomlProfile","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StringOrVec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TomlProject","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TomlWorkspace","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TomlDependency","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U32OrBool","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ProfilePackageSpec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StringOrBool","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VecStringOrBool","synthetic":true,"types":[]}];
implementors["cargo_platform"] = [{"text":"impl RefUnwindSafe for ParseError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Cfg","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CfgExpr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParseErrorKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Platform","synthetic":true,"types":[]}];
implementors["chrono"] = [{"text":"impl&lt;Tz&gt; RefUnwindSafe for Date&lt;Tz&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Tz as TimeZone&gt;::Offset: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Tz&gt; RefUnwindSafe for DateTime&lt;Tz&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Tz as TimeZone&gt;::Offset: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParseWeekdayError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SecondsFormat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Weekday","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FixedOffset","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Local","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Utc","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for LocalResult&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NaiveDate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IsoWeek","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NaiveTime","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NaiveDateTime","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Parsed","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InternalNumeric","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InternalFixed","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParseError","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for DelayedFormat&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pad","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Numeric","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Fixed","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Item&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for StrftimeItems&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["clap"] = [{"text":"impl&lt;'a, 'b&gt; !RefUnwindSafe for Arg&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ArgGroup&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ArgMatches&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for OsValues&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SubCommand&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Values&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !RefUnwindSafe for App&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ArgSettings","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AppSettings","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ErrorKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Shell","synthetic":true,"types":[]}];
implementors["color_backtrace"] = [{"text":"impl RefUnwindSafe for ColorScheme","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Settings","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Verbosity","synthetic":true,"types":[]}];
implementors["cookie"] = [{"text":"impl RefUnwindSafe for CookieBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CookieJar","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Delta&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c&gt; RefUnwindSafe for Cookie&lt;'c&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'c&gt; RefUnwindSafe for EncodedCookie&lt;'a, 'c&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParseError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SameSite","synthetic":true,"types":[]}];
implementors["cookie_store"] = [{"text":"impl&lt;'a&gt; RefUnwindSafe for Cookie&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CookieStore","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IdnaErrors","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]}];
implementors["corpus_database"] = [{"text":"impl&lt;K, V&gt; RefUnwindSafe for InterningTable&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CrateHash","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DefPathHash","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AdtVariantIndex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TupleFieldIndex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FnParamIndex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OperandIndex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StatementIndex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CallArgIndex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Module","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Item","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Scope","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FunctionCall","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Span","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Field","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Operand","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BasicBlock","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Statement","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InternedString","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Package","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PackageVersion","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Krate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Edition","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Name","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RelativeDefId","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SummaryId","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Abi","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DefPath","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Build","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SpanFileName","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CrateCfgKey","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CrateCfgValue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TyKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StatementKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BinOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NullOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TerminatorKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Mutability","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Constness","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Visibility","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TyVisibility","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Unsafety","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImplPolarity","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ScopeSafety","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AdtKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TyPrimitive","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TyDefKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Defaultness","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OperandKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AggregateKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CastKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BorrowKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BasicBlockKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SpanExpansionKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BlockCheckMode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InterningTables","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Relations","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Counters","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Tables","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TableMerger","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Loader","synthetic":true,"types":[]}];
implementors["corpus_manager_driver"] = [{"text":"impl RefUnwindSafe for CorpusManagerArgs","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Command","synthetic":true,"types":[]}];
implementors["crates_index"] = [{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Version","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Dependency","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Crates","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for CrateIndexPaths","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Index","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Crate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ErrorKind","synthetic":true,"types":[]}];
implementors["crates_io"] = [{"text":"impl !RefUnwindSafe for Registry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Crate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NewCrate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NewCrateDependency","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for User","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Warnings","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Auth","synthetic":true,"types":[]}];
implementors["crc32fast"] = [{"text":"impl RefUnwindSafe for Hasher","synthetic":true,"types":[]}];
implementors["crossbeam_channel"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for TryIter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for Select&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SelectedOperation&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReadyTimeoutError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SelectTimeoutError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TryReadyError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TrySelectError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RecvTimeoutError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TryRecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for SendTimeoutError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for TrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Sender&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Receiver&lt;T&gt;","synthetic":false,"types":[]}];
implementors["crossbeam_deque"] = [{"text":"impl&lt;T&gt; !RefUnwindSafe for Worker&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Stealer&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Injector&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Steal&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["crossbeam_epoch"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for Atomic&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'g, T, P&gt; RefUnwindSafe for CompareAndSetError&lt;'g, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Owned&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'g, T&gt; RefUnwindSafe for Shared&lt;'g, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Collector","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for LocalHandle","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Guard","synthetic":true,"types":[]}];
implementors["crossbeam_queue"] = [{"text":"impl&lt;T&gt; !RefUnwindSafe for ArrayQueue&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for SegQueue&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PopError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for PushError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["crossbeam_utils"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for CachePadded&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Backoff","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; RefUnwindSafe for ShardedLockReadGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; RefUnwindSafe for ShardedLockWriteGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Parker","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Unparker","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for WaitGroup","synthetic":true,"types":[]},{"text":"impl&lt;'env&gt; !RefUnwindSafe for Scope&lt;'env&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope, 'env&gt; !RefUnwindSafe for ScopedThreadBuilder&lt;'scope, 'env&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope, T&gt; RefUnwindSafe for ScopedJoinHandle&lt;'scope, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for AtomicCell&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; RefUnwindSafe for ShardedLock&lt;T&gt;","synthetic":false,"types":[]}];
implementors["crypto_hash"] = [{"text":"impl RefUnwindSafe for Hasher","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Algorithm","synthetic":true,"types":[]}];
implementors["csv"] = [{"text":"impl RefUnwindSafe for ByteRecord","synthetic":true,"types":[]},{"text":"impl&lt;'r&gt; RefUnwindSafe for ByteRecordIter&lt;'r&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Position","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeserializeError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FromUtf8Error","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; !RefUnwindSafe for IntoInnerError&lt;W&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Utf8Error","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for ByteRecordsIntoIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'r, R&gt; RefUnwindSafe for ByteRecordsIter&lt;'r, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, D&gt; RefUnwindSafe for DeserializeRecordsIntoIter&lt;R, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'r, R, D&gt; RefUnwindSafe for DeserializeRecordsIter&lt;'r, R, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for Reader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReaderBuilder","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for StringRecordsIntoIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'r, R&gt; RefUnwindSafe for StringRecordsIter&lt;'r, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StringRecord","synthetic":true,"types":[]},{"text":"impl&lt;'r&gt; RefUnwindSafe for StringRecordIter&lt;'r&gt;","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for Writer&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WriterBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeserializeErrorKind","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ErrorKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for QuoteStyle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Terminator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Trim","synthetic":true,"types":[]}];
implementors["csv_core"] = [{"text":"impl RefUnwindSafe for Reader","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReaderBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Writer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WriterBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReadFieldNoCopyResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReadFieldResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReadRecordNoCopyResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReadRecordResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WriteResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Terminator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for QuoteStyle","synthetic":true,"types":[]}];
implementors["curl"] = [{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FormError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MultiError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ShareError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Protocols&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Version","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Form","synthetic":true,"types":[]},{"text":"impl&lt;'form, 'data&gt; RefUnwindSafe for Part&lt;'form, 'data&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Easy","synthetic":true,"types":[]},{"text":"impl&lt;'easy, 'data&gt; !RefUnwindSafe for Transfer&lt;'easy, 'data&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Auth","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SslOpt","synthetic":true,"types":[]},{"text":"impl&lt;H&gt; !RefUnwindSafe for Easy2&lt;H&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for List","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NetRc","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ProxyType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HttpVersion","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IpResolve","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SslVersion","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TimeCondition","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InfoType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReadError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SeekResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WriteError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Multi","synthetic":true,"types":[]},{"text":"impl&lt;'multi&gt; !RefUnwindSafe for Message&lt;'multi&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for EasyHandle","synthetic":true,"types":[]},{"text":"impl&lt;H&gt; !RefUnwindSafe for Easy2Handle&lt;H&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Events","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SocketEvents","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WaitFd","synthetic":true,"types":[]}];
implementors["curl_sys"] = [{"text":"impl RefUnwindSafe for curl_fileinfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for curl_forms","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for curl_slist","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for curl_certinfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for curl_version_info_data","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CURLMsg","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for curl_waitfd","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for curl_sockaddr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CURL","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for curl_httppost","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CURLSH","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CURLM","synthetic":true,"types":[]}];
implementors["darling_core"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for Fields&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P, W&gt; RefUnwindSafe for Generics&lt;P, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;V, F&gt; RefUnwindSafe for Data&lt;V, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Style","synthetic":true,"types":[]},{"text":"impl&lt;T, L, C&gt; RefUnwindSafe for GenericParam&lt;T, L, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;L: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for IntoIter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Options","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Purpose","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for IdentString","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ignored","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PathList","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for SpannedValue&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, O&gt; RefUnwindSafe for WithOriginal&lt;T, O&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Flag","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Override&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["datafrog"] = [{"text":"impl&lt;'leap, Key, Val, Tuple, Func&gt; RefUnwindSafe for ExtendAnti&lt;'leap, Key, Val, Tuple, Func&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Func: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Key: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Tuple: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Val: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'leap, Key, Val, Tuple, Func&gt; RefUnwindSafe for ExtendWith&lt;'leap, Key, Val, Tuple, Func&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Func: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Key: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Tuple: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Val: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'leap, Key, Val, Tuple, Func&gt; RefUnwindSafe for FilterAnti&lt;'leap, Key, Val, Tuple, Func&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Func: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Key: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Tuple: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Val: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'leap, Key, Val, Tuple, Func&gt; RefUnwindSafe for FilterWith&lt;'leap, Key, Val, Tuple, Func&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Func: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Key: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Tuple: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Val: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Tuple, Func&gt; RefUnwindSafe for PrefixFilter&lt;Tuple, Func&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Func: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Tuple: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Tuple, Val, Func&gt; RefUnwindSafe for ValueFilter&lt;Tuple, Val, Func&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Func: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Tuple: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Val: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Tuple&gt; RefUnwindSafe for Relation&lt;Tuple&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Tuple: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Iteration","synthetic":true,"types":[]},{"text":"impl&lt;Tuple&gt; !RefUnwindSafe for Variable&lt;Tuple&gt;","synthetic":true,"types":[]}];
implementors["either"] = [{"text":"impl&lt;L, R&gt; RefUnwindSafe for Either&lt;L, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["encoding_rs"] = [{"text":"impl RefUnwindSafe for Encoding","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Decoder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Encoder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CoderResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DecoderResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EncoderResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Latin1Bidi","synthetic":true,"types":[]}];
implementors["env_logger"] = [{"text":"impl&lt;'a&gt; RefUnwindSafe for Env&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Logger","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Target","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WriteStyle","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Filter","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Timestamp","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Style","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for StyledValue&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Formatter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Color","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TimestampPrecision","synthetic":true,"types":[]}];
implementors["error_chain"] = [{"text":"impl&lt;'a&gt; !RefUnwindSafe for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; RefUnwindSafe for DisplayChain&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ErrorKind","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ErrorKind","synthetic":true,"types":[]}];
implementors["failure"] = [{"text":"impl !RefUnwindSafe for Backtrace","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for Compat&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; !RefUnwindSafe for Context&lt;D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for SyncFailure&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;'f&gt; !RefUnwindSafe for Causes&lt;'f&gt;","synthetic":true,"types":[]}];
implementors["fallible_iterator"] = [{"text":"impl&lt;T, F&gt; RefUnwindSafe for Map&lt;T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; RefUnwindSafe for Chain&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Cloned&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Convert&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Enumerate&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; RefUnwindSafe for Filter&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; RefUnwindSafe for FilterMap&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, U, F&gt; RefUnwindSafe for FlatMap&lt;I, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as IntoFallibleIterator&gt;::IntoFallibleIter: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Flatten&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;I as FallibleIterator&gt;::Item as IntoFallibleIterator&gt;::IntoFallibleIter: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Fuse&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; RefUnwindSafe for Inspect&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Iterator&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; RefUnwindSafe for MapErr&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Peekable&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as FallibleIterator&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Rev&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, St, F&gt; RefUnwindSafe for Scan&lt;I, St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Skip&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; RefUnwindSafe for SkipWhile&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for StepBy&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Take&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; RefUnwindSafe for TakeWhile&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Cycle&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; RefUnwindSafe for Zip&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["filetime"] = [{"text":"impl RefUnwindSafe for FileTime","synthetic":true,"types":[]}];
implementors["findshlibs"] = [{"text":"impl RefUnwindSafe for Svma","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Avma","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Bias","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SharedLibraryId","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IterationControl","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Segment&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SegmentIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SharedLibrary&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Segment&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SegmentIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SharedLibrary&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["flate2"] = [{"text":"impl RefUnwindSafe for Crc","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for CrcReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for CrcWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GzBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GzHeader","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Compress","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompressError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Decompress","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DecompressError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Compression","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Status","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FlushCompress","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FlushDecompress","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for DeflateEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for DeflateDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for DeflateEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for DeflateDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for DeflateEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for DeflateDecoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for GzEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; !RefUnwindSafe for GzDecoder&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; !RefUnwindSafe for MultiGzDecoder&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for GzEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; !RefUnwindSafe for GzDecoder&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; !RefUnwindSafe for MultiGzDecoder&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for GzEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for GzDecoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for ZlibEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for ZlibDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for ZlibEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for ZlibDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for ZlibEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for ZlibDecoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["fnv"] = [{"text":"impl RefUnwindSafe for FnvHasher","synthetic":true,"types":[]}];
implementors["fs2"] = [{"text":"impl RefUnwindSafe for FsStats","synthetic":true,"types":[]}];
implementors["futures"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for Async&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for AsyncSink&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; RefUnwindSafe for Empty&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F, R&gt; RefUnwindSafe for Lazy&lt;F, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as IntoFuture&gt;::Future: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for PollFn&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; RefUnwindSafe for FutureResult&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, F&gt; RefUnwindSafe for LoopFn&lt;A, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as IntoFuture&gt;::Future: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, F&gt; RefUnwindSafe for AndThen&lt;A, B, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as IntoFuture&gt;::Future: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for Flatten&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;A as Future&gt;::Item as IntoFuture&gt;::Future: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for FlattenStream&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Future&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for Fuse&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for IntoStream&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; RefUnwindSafe for Join&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Future&gt;::Item: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Future&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, C&gt; RefUnwindSafe for Join3&lt;A, B, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Future&gt;::Item: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Future&gt;::Item: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as Future&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, C, D&gt; RefUnwindSafe for Join4&lt;A, B, C, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Future&gt;::Item: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Future&gt;::Item: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as Future&gt;::Item: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;D as Future&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, C, D, E&gt; RefUnwindSafe for Join5&lt;A, B, C, D, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Future&gt;::Item: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Future&gt;::Item: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as Future&gt;::Item: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;D as Future&gt;::Item: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;E as Future&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, F&gt; RefUnwindSafe for Map&lt;A, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, F&gt; RefUnwindSafe for MapErr&lt;A, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, E&gt; RefUnwindSafe for FromErr&lt;A, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, F&gt; RefUnwindSafe for OrElse&lt;A, B, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as IntoFuture&gt;::Future: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; RefUnwindSafe for Select&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; RefUnwindSafe for SelectNext&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; RefUnwindSafe for Select2&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, F&gt; RefUnwindSafe for Then&lt;A, B, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as IntoFuture&gt;::Future: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, F&gt; RefUnwindSafe for Inspect&lt;A, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for CatchUnwind&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for JoinAll&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;I as IntoIterator&gt;::Item as IntoFuture&gt;::Future: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;I as IntoIterator&gt;::Item as IntoFuture&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for SelectAll&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for SelectOk&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; !RefUnwindSafe for Shared&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for SharedItem&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for SharedError&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for ExecuteError&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; RefUnwindSafe for Loop&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; RefUnwindSafe for Either&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExecuteErrorKind","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Iter&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, E&gt; RefUnwindSafe for IterOk&lt;I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for IterResult&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; RefUnwindSafe for Repeat&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F, U&gt; RefUnwindSafe for AndThen&lt;S, F, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as IntoFuture&gt;::Future: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S1, S2&gt; RefUnwindSafe for Chain&lt;S1, S2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S2: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for Concat&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for Concat2&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; RefUnwindSafe for Empty&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; RefUnwindSafe for Filter&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; RefUnwindSafe for FilterMap&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for Flatten&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F, Fut, T&gt; RefUnwindSafe for Fold&lt;S, F, Fut, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as IntoFuture&gt;::Future: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F, U&gt; RefUnwindSafe for ForEach&lt;S, F, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as IntoFuture&gt;::Future: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, E&gt; RefUnwindSafe for FromErr&lt;S, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for Fuse&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for StreamFuture&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; RefUnwindSafe for Inspect&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; RefUnwindSafe for InspectErr&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; RefUnwindSafe for Map&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; RefUnwindSafe for MapErr&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S1, S2&gt; RefUnwindSafe for Merge&lt;S1, S2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S2: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S2 as Stream&gt;::Error: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; RefUnwindSafe for Once&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F, U&gt; RefUnwindSafe for OrElse&lt;S, F, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as IntoFuture&gt;::Future: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for Peekable&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for PollFn&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S1, S2&gt; RefUnwindSafe for Select&lt;S1, S2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S2: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for Skip&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, P, R&gt; RefUnwindSafe for SkipWhile&lt;S, P, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as IntoFuture&gt;::Future: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for Take&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, P, R&gt; RefUnwindSafe for TakeWhile&lt;S, P, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as IntoFuture&gt;::Future: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F, U&gt; RefUnwindSafe for Then&lt;S, F, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as IntoFuture&gt;::Future: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F, Fut&gt; RefUnwindSafe for Unfold&lt;T, F, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as IntoFuture&gt;::Future: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S1, S2&gt; RefUnwindSafe for Zip&lt;S1, S2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S2: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S1 as Stream&gt;::Item: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S2 as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; RefUnwindSafe for Forward&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !RefUnwindSafe for Buffered&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !RefUnwindSafe for BufferUnordered&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for CatchUnwind&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for Chunks&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Error: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for Collect&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !RefUnwindSafe for Wait&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !RefUnwindSafe for SplitStream&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !RefUnwindSafe for SplitSink&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for ReuniteError&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for FuturesOrdered&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I1, I2&gt; RefUnwindSafe for MergedItem&lt;I1, I2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I2: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; !RefUnwindSafe for FuturesUnordered&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, F&gt; !RefUnwindSafe for IterMut&lt;'a, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for Buffer&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Sink&gt;::SinkItem: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !RefUnwindSafe for Wait&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S, U, F, Fut&gt; RefUnwindSafe for With&lt;S, U, F, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as IntoFuture&gt;::Future: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Sink&gt;::SinkItem: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, U, F, St&gt; RefUnwindSafe for WithFlatMap&lt;S, U, F, St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Sink&gt;::SinkItem: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for Flush&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for Send&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Sink&gt;::SinkItem: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; RefUnwindSafe for SendAll&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; RefUnwindSafe for SinkMapErr&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, E&gt; RefUnwindSafe for SinkFromErr&lt;S, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; RefUnwindSafe for Fanout&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Sink&gt;::SinkItem: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Sink&gt;::SinkItem: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Task","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Spawn&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for NotifyHandle","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for AtomicTask","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for UnparkEvent","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for LocalKey&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for BiLock&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for BiLockGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for BiLockAcquire&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for BiLockAcquired&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Canceled","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; !RefUnwindSafe for SpawnHandle&lt;T, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; !RefUnwindSafe for Execute&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for UnboundedSender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for UnboundedReceiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for TrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Item, Error&gt; !RefUnwindSafe for SpawnHandle&lt;Item, Error&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !RefUnwindSafe for Execute&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for UnboundedSender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for UnboundedReceiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Item, Error&gt; !RefUnwindSafe for SpawnHandle&lt;Item, Error&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !RefUnwindSafe for Execute&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; !RefUnwindSafe for SpawnHandle&lt;T, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; !RefUnwindSafe for Execute&lt;F&gt;","synthetic":true,"types":[]}];
implementors["futures_channel"] = [{"text":"impl&lt;T&gt; !RefUnwindSafe for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for UnboundedSender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for UnboundedReceiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SendError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for TrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TryRecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Canceled","synthetic":true,"types":[]}];
implementors["futures_cpupool"] = [{"text":"impl RefUnwindSafe for CpuPool","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; !RefUnwindSafe for CpuFuture&lt;T, E&gt;","synthetic":true,"types":[]}];
implementors["futures_task"] = [{"text":"impl RefUnwindSafe for SpawnError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for WakerRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for FutureObj&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for LocalFutureObj&lt;'a, T&gt;","synthetic":true,"types":[]}];
implementors["futures_util"] = [{"text":"impl&lt;Fut&gt; RefUnwindSafe for Flatten&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as Future&gt;::Output: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; RefUnwindSafe for FlattenStream&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as Future&gt;::Output: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; RefUnwindSafe for Fuse&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; RefUnwindSafe for Inspect&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; RefUnwindSafe for IntoStream&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; RefUnwindSafe for Map&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; RefUnwindSafe for NeverError&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, F&gt; RefUnwindSafe for Then&lt;Fut1, Fut2, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; RefUnwindSafe for UnitError&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; RefUnwindSafe for CatchUnwind&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; !RefUnwindSafe for Shared&lt;Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, F&gt; RefUnwindSafe for AndThen&lt;Fut1, Fut2, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, E&gt; RefUnwindSafe for ErrInto&lt;Fut, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; RefUnwindSafe for InspectErr&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; RefUnwindSafe for InspectOk&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; RefUnwindSafe for IntoFuture&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; RefUnwindSafe for MapErr&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; RefUnwindSafe for MapOk&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, F&gt; RefUnwindSafe for OrElse&lt;Fut1, Fut2, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; RefUnwindSafe for TryFlattenStream&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as TryFuture&gt;::Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; RefUnwindSafe for UnwrapOrElse&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for Lazy&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Pending&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for OptionFuture&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for PollFn&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Ready&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2&gt; RefUnwindSafe for Join&lt;Fut1, Fut2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as Future&gt;::Output: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as Future&gt;::Output: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3&gt; RefUnwindSafe for Join3&lt;Fut1, Fut2, Fut3&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as Future&gt;::Output: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as Future&gt;::Output: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as Future&gt;::Output: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3, Fut4&gt; RefUnwindSafe for Join4&lt;Fut1, Fut2, Fut3, Fut4&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut4: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as Future&gt;::Output: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as Future&gt;::Output: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as Future&gt;::Output: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut4 as Future&gt;::Output: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3, Fut4, Fut5&gt; RefUnwindSafe for Join5&lt;Fut1, Fut2, Fut3, Fut4, Fut5&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut4: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut5: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as Future&gt;::Output: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as Future&gt;::Output: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as Future&gt;::Output: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut4 as Future&gt;::Output: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut5 as Future&gt;::Output: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for JoinAll&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Future&gt;::Output: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; RefUnwindSafe for Select&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; RefUnwindSafe for SelectAll&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2&gt; RefUnwindSafe for TryJoin&lt;Fut1, Fut2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as TryFuture&gt;::Error: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as TryFuture&gt;::Error: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as TryFuture&gt;::Ok: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as TryFuture&gt;::Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3&gt; RefUnwindSafe for TryJoin3&lt;Fut1, Fut2, Fut3&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as TryFuture&gt;::Error: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as TryFuture&gt;::Error: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as TryFuture&gt;::Error: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as TryFuture&gt;::Ok: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as TryFuture&gt;::Ok: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as TryFuture&gt;::Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3, Fut4&gt; RefUnwindSafe for TryJoin4&lt;Fut1, Fut2, Fut3, Fut4&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut4: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as TryFuture&gt;::Error: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as TryFuture&gt;::Error: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as TryFuture&gt;::Error: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut4 as TryFuture&gt;::Error: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as TryFuture&gt;::Ok: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as TryFuture&gt;::Ok: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as TryFuture&gt;::Ok: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut4 as TryFuture&gt;::Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3, Fut4, Fut5&gt; RefUnwindSafe for TryJoin5&lt;Fut1, Fut2, Fut3, Fut4, Fut5&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut4: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut5: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as TryFuture&gt;::Error: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as TryFuture&gt;::Error: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as TryFuture&gt;::Error: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut4 as TryFuture&gt;::Error: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut5 as TryFuture&gt;::Error: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as TryFuture&gt;::Ok: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as TryFuture&gt;::Ok: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as TryFuture&gt;::Ok: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut4 as TryFuture&gt;::Ok: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut5 as TryFuture&gt;::Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for TryJoinAll&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as TryFuture&gt;::Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; RefUnwindSafe for TrySelect&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; RefUnwindSafe for SelectOk&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; !RefUnwindSafe for Abortable&lt;Fut&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for AbortHandle","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for AbortRegistration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Aborted","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; RefUnwindSafe for MaybeDone&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as Future&gt;::Output: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; RefUnwindSafe for Either&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St1, St2&gt; RefUnwindSafe for Chain&lt;St1, St2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St2: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, C&gt; RefUnwindSafe for Collect&lt;St, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; RefUnwindSafe for Concat&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; RefUnwindSafe for Enumerate&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; RefUnwindSafe for Filter&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; RefUnwindSafe for FilterMap&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; RefUnwindSafe for Flatten&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, T, F&gt; RefUnwindSafe for Fold&lt;St, Fut, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; RefUnwindSafe for ForEach&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; RefUnwindSafe for Fuse&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; RefUnwindSafe for Inspect&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; RefUnwindSafe for Map&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, St:&nbsp;?Sized&gt; RefUnwindSafe for Next&lt;'a, St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; RefUnwindSafe for Peekable&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, St:&nbsp;?Sized&gt; RefUnwindSafe for SelectNextSome&lt;'a, St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; RefUnwindSafe for Skip&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; RefUnwindSafe for SkipWhile&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; RefUnwindSafe for StreamFuture&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; RefUnwindSafe for Take&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; RefUnwindSafe for TakeWhile&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; RefUnwindSafe for Then&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St1, St2&gt; RefUnwindSafe for Zip&lt;St1, St2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St2: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St1 as Stream&gt;::Item: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St2 as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; RefUnwindSafe for CatchUnwind&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; RefUnwindSafe for Chunks&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; !RefUnwindSafe for BufferUnordered&lt;St&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; !RefUnwindSafe for Buffered&lt;St&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; !RefUnwindSafe for ForEachConcurrent&lt;St, Fut, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; RefUnwindSafe for AndThen&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, E&gt; RefUnwindSafe for ErrInto&lt;St, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; RefUnwindSafe for InspectErr&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; RefUnwindSafe for InspectOk&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; RefUnwindSafe for IntoStream&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; RefUnwindSafe for MapErr&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; RefUnwindSafe for MapOk&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; RefUnwindSafe for OrElse&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, C&gt; RefUnwindSafe for TryCollect&lt;St, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; RefUnwindSafe for TryConcat&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; RefUnwindSafe for TryFilter&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; RefUnwindSafe for TryFilterMap&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; RefUnwindSafe for TryFlatten&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, T, F&gt; RefUnwindSafe for TryFold&lt;St, Fut, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; RefUnwindSafe for TryForEach&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, St:&nbsp;?Sized&gt; RefUnwindSafe for TryNext&lt;'a, St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; RefUnwindSafe for TrySkipWhile&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; RefUnwindSafe for IntoAsyncRead&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; !RefUnwindSafe for TryBufferUnordered&lt;St&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; !RefUnwindSafe for TryForEachConcurrent&lt;St, Fut, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Iter&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Repeat&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Empty&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; RefUnwindSafe for Once&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Pending&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for PollFn&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St1, St2&gt; RefUnwindSafe for Select&lt;St1, St2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St2: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F, Fut&gt; RefUnwindSafe for Unfold&lt;T, F, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for FuturesOrdered&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; !RefUnwindSafe for FuturesUnordered&lt;Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; !RefUnwindSafe for SelectAll&lt;St&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Fut&gt; !RefUnwindSafe for Iter&lt;'a, Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Fut&gt; !RefUnwindSafe for IterMut&lt;'a, Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Fut&gt; !RefUnwindSafe for IterPinMut&lt;'a, Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Fut&gt; !RefUnwindSafe for IterPinRef&lt;'a, Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for AllowStdIo&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for BufReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for BufWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; RefUnwindSafe for Chain&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W:&nbsp;?Sized&gt; RefUnwindSafe for Close&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, W:&nbsp;?Sized&gt; RefUnwindSafe for Copy&lt;'a, R, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, W:&nbsp;?Sized&gt; RefUnwindSafe for CopyBuf&lt;'a, R, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Cursor&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Empty","synthetic":true,"types":[]},{"text":"impl&lt;'a, W:&nbsp;?Sized&gt; RefUnwindSafe for Flush&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for Lines&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; RefUnwindSafe for Read&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; RefUnwindSafe for ReadVectored&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; RefUnwindSafe for ReadExact&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; RefUnwindSafe for ReadLine&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; RefUnwindSafe for ReadToEnd&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; RefUnwindSafe for ReadToString&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; RefUnwindSafe for ReadUntil&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Repeat","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized&gt; RefUnwindSafe for Seek&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sink","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for ReadHalf&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for WriteHalf&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for Take&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Window&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W:&nbsp;?Sized&gt; RefUnwindSafe for Write&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W:&nbsp;?Sized&gt; RefUnwindSafe for WriteVectored&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W:&nbsp;?Sized&gt; RefUnwindSafe for WriteAll&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Mutex&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for MutexLockFuture&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for MutexGuard&lt;'a, T&gt;","synthetic":true,"types":[]}];
implementors["getrandom"] = [{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]}];
implementors["gimli"] = [{"text":"impl RefUnwindSafe for Encoding","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LineEncoding","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Register","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for DebugAbbrevOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for DebugAddrBase&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for DebugAddrIndex&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for DebugInfoOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for DebugLineOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for DebugLineStrOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for LocationListsOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for DebugLocListsBase&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for DebugLocListsIndex&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for DebugMacinfoOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for RangeListsOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for DebugRngListsBase&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for DebugRngListsIndex&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for DebugStrOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for DebugStrOffsetsBase&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for DebugStrOffsetsIndex&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for DebugTypesOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DebugTypeSignature","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for DebugFrameOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for EhFrameOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Arm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X86","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X86_64","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BigEndian","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LittleEndian","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Format","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for UnitSectionOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SectionId","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RunTimeEndian","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DwUt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DwCfa","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DwChildren","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DwTag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DwAt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DwForm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DwAte","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DwLle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DwDs","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DwEnd","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DwAccess","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DwVis","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DwVirtuality","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DwLang","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DwAddr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DwId","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DwCc","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DwInl","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DwOrd","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DwDsc","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DwIdx","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DwDefaulted","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DwLns","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DwLne","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DwLnct","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DwMacro","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DwRle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DwOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DwEhPe","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for DebugAddr&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for DebugFrame&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for EhFrameHdr&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for ParsedEhFrameHdr&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; RefUnwindSafe for EhHdrTable&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for EhFrame&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BaseAddresses","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SectionBaseAddresses","synthetic":true,"types":[]},{"text":"impl&lt;'bases, Section, R&gt; RefUnwindSafe for CfiEntriesIter&lt;'bases, Section, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Section: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Augmentation","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; RefUnwindSafe for CommonInformationEntry&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'bases, Section, R&gt; RefUnwindSafe for PartialFrameDescriptionEntry&lt;'bases, Section, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Section: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Section as UnwindSection&lt;R&gt;&gt;::Offset: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; RefUnwindSafe for FrameDescriptionEntry&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for UninitializedUnwindContext&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for UnwindContext&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; RefUnwindSafe for UnwindTable&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'iter, R&gt; RefUnwindSafe for RegisterRuleIter&lt;'iter, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for UnwindTableRow&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; RefUnwindSafe for CallFrameInstructionIter&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for Dwarf&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; RefUnwindSafe for Unit&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for RangeIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'input, Endian&gt; RefUnwindSafe for EndianSlice&lt;'input, Endian&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Endian: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Endian, T&gt; RefUnwindSafe for EndianReader&lt;Endian, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Endian: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReaderOffsetId","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for DebugAbbrev&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Abbreviations","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Abbreviation","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AttributeSpecification","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for ArangeEntry&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for DebugAranges&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for ArangeEntryIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for DebugLine&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Program, Offset&gt; RefUnwindSafe for LineRows&lt;R, Program, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Program: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for LineInstructions&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LineRow","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for LineSequence&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; RefUnwindSafe for LineProgramHeader&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; RefUnwindSafe for IncompleteLineProgram&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; RefUnwindSafe for CompleteLineProgram&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; RefUnwindSafe for FileEntry&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FileEntryFormat","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for DebugLoc&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for DebugLocLists&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for LocationLists&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for RawLocListIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for LocListIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for LocationListEntry&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; RefUnwindSafe for Piece&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for Expression&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for Evaluation&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for PubNamesEntry&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for DebugPubNames&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for PubNamesEntryIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for PubTypesEntry&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for DebugPubTypes&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for PubTypesEntryIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for DebugRanges&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for DebugRngLists&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for RangeLists&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for RawRngListIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for RngListIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Range","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for DebugStr&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for DebugStrOffsets&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for DebugLineStr&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for UnitOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for DebugInfo&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for CompilationUnitHeadersIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; RefUnwindSafe for CompilationUnitHeader&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; RefUnwindSafe for UnitHeader&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'abbrev, 'unit, R, Offset&nbsp;=&nbsp;&lt;R as Reader&gt;::Offset&gt; !RefUnwindSafe for DebuggingInformationEntry&lt;'abbrev, 'unit, R, Offset&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for Attribute&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'abbrev, 'entry, 'unit, R&gt; !RefUnwindSafe for AttrsIter&lt;'abbrev, 'entry, 'unit, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'abbrev, 'unit, R&gt; !RefUnwindSafe for EntriesCursor&lt;'abbrev, 'unit, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'abbrev, 'unit, R&gt; !RefUnwindSafe for EntriesTree&lt;'abbrev, 'unit, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'abbrev, 'unit, 'tree, R&gt; !RefUnwindSafe for EntriesTreeNode&lt;'abbrev, 'unit, 'tree, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'abbrev, 'unit, 'tree, R&gt; !RefUnwindSafe for EntriesTreeIter&lt;'abbrev, 'unit, 'tree, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for DebugTypes&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for TypeUnitHeadersIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; RefUnwindSafe for TypeUnitHeader&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'bases, Section, R&gt; RefUnwindSafe for CieOrFde&lt;'bases, Section, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Section: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Section as UnwindSection&lt;R&gt;&gt;::Offset: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for CfaRule&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for RegisterRule&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for CallFrameInstruction&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pointer","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; RefUnwindSafe for LineInstruction&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ColumnType","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for RawLocListEntry&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for DieReference&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; RefUnwindSafe for Operation&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; RefUnwindSafe for Location&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for EvaluationResult&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for RawRngListEntry&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; RefUnwindSafe for AttributeValue&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ValueType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Value","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]}];
implementors["git2"] = [{"text":"impl&lt;'repo&gt; RefUnwindSafe for Blame&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'blame&gt; RefUnwindSafe for BlameHunk&lt;'blame&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'blame&gt; RefUnwindSafe for BlameIter&lt;'blame&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BlameOptions","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; RefUnwindSafe for Blob&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; RefUnwindSafe for BlobWriter&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; RefUnwindSafe for Branch&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; RefUnwindSafe for Branches&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Buf","synthetic":true,"types":[]},{"text":"impl&lt;'cb&gt; !RefUnwindSafe for CherrypickOptions&lt;'cb&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; RefUnwindSafe for Commit&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'commit, 'repo&gt; RefUnwindSafe for Parents&lt;'commit, 'repo&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl&lt;'cfg&gt; RefUnwindSafe for ConfigEntries&lt;'cfg&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'cfg&gt; RefUnwindSafe for ConfigEntry&lt;'cfg&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Cred","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CredentialHelper","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; RefUnwindSafe for Describe&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DescribeFormatOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DescribeOptions","synthetic":true,"types":[]},{"text":"impl&lt;'diff&gt; RefUnwindSafe for Deltas&lt;'diff&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; RefUnwindSafe for Diff&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for DiffDelta&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for DiffFile&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DiffOptions","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for DiffBinary&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for DiffBinaryFile&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DiffFindOptions","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for DiffHunk&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for DiffLine&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DiffStats","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Index","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IndexConflict","synthetic":true,"types":[]},{"text":"impl&lt;'index&gt; RefUnwindSafe for IndexConflicts&lt;'index&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'index&gt; RefUnwindSafe for IndexEntries&lt;'index&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IndexEntry","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; RefUnwindSafe for AnnotatedCommit&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MergeOptions","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; RefUnwindSafe for Note&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; RefUnwindSafe for Notes&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; RefUnwindSafe for Object&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; RefUnwindSafe for Odb&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for OdbObject&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; RefUnwindSafe for OdbReader&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; RefUnwindSafe for OdbWriter&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Oid","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; !RefUnwindSafe for PackBuilder&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Patch","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pathspec","synthetic":true,"types":[]},{"text":"impl&lt;'list&gt; RefUnwindSafe for PathspecFailedEntries&lt;'list&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ps&gt; RefUnwindSafe for PathspecMatchList&lt;'ps&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'list&gt; RefUnwindSafe for PathspecDiffEntries&lt;'list&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'list&gt; RefUnwindSafe for PathspecEntries&lt;'list&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ProxyOptions&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; RefUnwindSafe for Rebase&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'rebase&gt; RefUnwindSafe for RebaseOperation&lt;'rebase&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'cb&gt; !RefUnwindSafe for RebaseOptions&lt;'cb&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; RefUnwindSafe for Reference&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo, 'references&gt; RefUnwindSafe for ReferenceNames&lt;'repo, 'references&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; RefUnwindSafe for References&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Reflog","synthetic":true,"types":[]},{"text":"impl&lt;'reflog&gt; RefUnwindSafe for ReflogEntry&lt;'reflog&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'reflog&gt; RefUnwindSafe for ReflogIter&lt;'reflog&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'remote&gt; RefUnwindSafe for Refspec&lt;'remote&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'cb&gt; !RefUnwindSafe for FetchOptions&lt;'cb&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'cb&gt; !RefUnwindSafe for PushOptions&lt;'cb&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'remote&gt; RefUnwindSafe for Refspecs&lt;'remote&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; RefUnwindSafe for Remote&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo, 'connection, 'cb&gt; !RefUnwindSafe for RemoteConnection&lt;'repo, 'connection, 'cb&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'remote&gt; RefUnwindSafe for RemoteHead&lt;'remote&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for RemoteCallbacks&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Progress&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Repository","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RepositoryInitOptions","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; RefUnwindSafe for Revspec&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; RefUnwindSafe for Revwalk&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Signature&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'cb&gt; !RefUnwindSafe for StashApplyOptions&lt;'cb&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'statuses&gt; RefUnwindSafe for StatusEntry&lt;'statuses&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'statuses&gt; RefUnwindSafe for StatusIter&lt;'statuses&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StatusOptions","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; RefUnwindSafe for Statuses&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; RefUnwindSafe for Submodule&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'cb&gt; !RefUnwindSafe for SubmoduleUpdateOptions&lt;'cb&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; RefUnwindSafe for Tag&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IndexTime","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Time","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; RefUnwindSafe for Tree&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'tree&gt; RefUnwindSafe for TreeEntry&lt;'tree&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'tree&gt; RefUnwindSafe for TreeIter&lt;'tree&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; RefUnwindSafe for TreeBuilder&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sort","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CredentialType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IndexEntryFlag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IndexEntryExtendedFlag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IndexAddOption","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RepositoryOpenFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RevparseMode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MergeAnalysis","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MergePreference","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Status","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RepositoryInitMode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SubmoduleStatus","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PathspecFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CheckoutNotificationType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DiffStatsFormat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StashApplyFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StashFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AttrCheckFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DiffBinaryKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PackBuilderStage","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RebaseOperationType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StatusShow","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TreeWalkMode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TreeWalkResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ErrorCode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ErrorClass","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RepositoryState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Direction","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ResetType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ObjectType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReferenceType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BranchType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ConfigLevel","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FileFavor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Delta","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SubmoduleIgnore","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DiffFormat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AutotagOption","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FetchPrune","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StashApplyProgress","synthetic":true,"types":[]},{"text":"impl&lt;'cb&gt; !RefUnwindSafe for RepoBuilder&lt;'cb&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'cb&gt; !RefUnwindSafe for CheckoutBuilder&lt;'cb&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CloneLocal","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Cert&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for CertHostkey&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for CertX509&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OidArray","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StringArray","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for IterBytes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Transport","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Service","synthetic":true,"types":[]}];
implementors["glob"] = [{"text":"impl !RefUnwindSafe for Paths","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for GlobError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatternError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pattern","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MatchOptions","synthetic":true,"types":[]}];
implementors["globset"] = [{"text":"impl RefUnwindSafe for Glob","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for GlobBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for GlobMatcher","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for GlobSet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GlobSetBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Candidate&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ErrorKind","synthetic":true,"types":[]}];
implementors["goblin"] = [{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Strtab&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ctx","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Container","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Elf&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Header","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Header","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Header","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ProgramHeader","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ProgramHeader","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ProgramHeader","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SectionHeader","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SectionHeader","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SectionHeader","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompressionHeader","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompressionHeader","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompressionHeader","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sym","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Symtab&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SymIterator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sym","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sym","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Dyn","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Dynamic","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DynamicInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Dyn","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DynamicInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Dyn","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DynamicInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Reloc","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for RelocSection&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for RelocIterator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rela","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rel","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rela","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rel","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Nhdr32","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Nhdr64","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for NoteDataIterator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for NoteIterator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Note&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'process&gt; RefUnwindSafe for GnuHash&lt;'process&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'process&gt; RefUnwindSafe for GnuHash&lt;'process&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for MachO&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for MultiArch&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for FatArchIterator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for MachOIterator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Mach&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Header32","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Header64","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Header","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FatHeader","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FatArch","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LoadCommandHeader","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Section32","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Section64","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SegmentCommand32","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SegmentCommand64","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Fvmlib","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FvmlibCommand","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Dylib","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DylibCommand","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SubFrameworkCommand","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SubClientCommand","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SubUmbrellaCommand","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SubLibraryCommand","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PreboundDylibCommand","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DylinkerCommand","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ThreadCommand","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RoutinesCommand32","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RoutinesCommand64","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SymtabCommand","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DysymtabCommand","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DylibTableOfContents","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DylibModule","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DylibModule64","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DylibReference","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TwolevelHintsCommand","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TwolevelHint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PrebindCksumCommand","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UuidCommand","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RpathCommand","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LinkeditDataCommand","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EncryptionInfoCommand32","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EncryptionInfoCommand64","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VersionMinCommand","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DyldInfoCommand","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LinkerOptionCommand","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SymsegCommand","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IdentCommand","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FvmfileCommand","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EntryPointCommand","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SourceVersionCommand","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DataInCodeEntry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LoadCommand","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CommandVariant","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Nlist32","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Nlist64","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Nlist","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SymbolsCtx","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SymbolIterator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Symbols&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Export&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ExportTrie&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SymbolKind","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ExportInfo&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Import&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for BindInterpreter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RelocationInfo","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for RelocationIterator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Section","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SectionIterator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Segment&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Segments&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for PE&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Coff&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DosHeader","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CoffHeader","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Header","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StandardFields32","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StandardFields64","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StandardFields","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WindowsFields32","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WindowsFields64","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OptionalHeader","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SectionTable","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DataDirectory","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DataDirectories","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExportDirectoryTable","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ExportData&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Export&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExportAddressTableEntry","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Reexport&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for HintNameTableEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImportDirectoryEntry","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SyntheticImportDirectoryEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ImportData&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Import&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SyntheticImportLookupTableEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for DebugData&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImageDebugDirectory","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for CodeviewPDB70DebugInfo&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RuntimeFunction","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for RuntimeFunctionIterator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Register","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnwindCode","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for UnwindCodeIterator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for UnwindInfo&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ExceptionData&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StackFrameOffset","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnwindOperation","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for UnwindHandler&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Symbol","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AuxFunctionDefinition","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AuxBeginAndEndFunction","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AuxWeakExternal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AuxSectionDefinition","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SymbolTable&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SymbolIterator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Relocation","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Relocations&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["h2"] = [{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Reason","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FlowControl","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ping","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PingPong","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pong","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RecvStream","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; RefUnwindSafe for SendStream&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StreamId","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; RefUnwindSafe for SendRequest&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; RefUnwindSafe for ReadySendRequest&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, B&nbsp;=&nbsp;Bytes&gt; !RefUnwindSafe for Connection&lt;T, B&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ResponseFuture","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PushedResponseFuture","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PushPromise","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PushPromises","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl&lt;T, B&gt; RefUnwindSafe for Handshake&lt;T, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, B&gt; !RefUnwindSafe for Connection&lt;T, B&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; RefUnwindSafe for SendResponse&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; RefUnwindSafe for SendPushedResponse&lt;B&gt;","synthetic":true,"types":[]}];
implementors["hex"] = [{"text":"impl RefUnwindSafe for FromHexError","synthetic":true,"types":[]}];
implementors["http"] = [{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Extensions","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for HeaderMap&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for IterMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Keys&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Values&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for ValuesMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Drain&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for GetAll&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for VacantEntry&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for OccupiedEntry&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for ValueIter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for ValueIterMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for ValueDrain&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HeaderName","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InvalidHeaderName","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InvalidHeaderNameBytes","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HeaderValue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InvalidHeaderValue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InvalidHeaderValueBytes","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ToStrError","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Entry&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Method","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InvalidMethod","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Request&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Parts","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Response&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Parts","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StatusCode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InvalidStatusCode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Version","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Authority","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PathAndQuery","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Scheme","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Port&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Uri","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Parts","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InvalidUri","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InvalidUriBytes","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InvalidUriParts","synthetic":true,"types":[]}];
implementors["http_body"] = [{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; RefUnwindSafe for Data&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; RefUnwindSafe for Trailers&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SizeHint","synthetic":true,"types":[]}];
implementors["httparse"] = [{"text":"impl RefUnwindSafe for InvalidChunkSize","synthetic":true,"types":[]},{"text":"impl&lt;'headers, 'buf&gt; RefUnwindSafe for Request&lt;'headers, 'buf&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'headers, 'buf&gt; RefUnwindSafe for Response&lt;'headers, 'buf&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Header&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Status&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["humantime"] = [{"text":"impl RefUnwindSafe for FormattedDuration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Duration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Timestamp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rfc3339Timestamp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]}];
implementors["hyper"] = [{"text":"impl !RefUnwindSafe for Body","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Chunk","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Sender","synthetic":true,"types":[]},{"text":"impl&lt;R&nbsp;=&nbsp;GaiResolver&gt; !RefUnwindSafe for HttpConnector&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;C, B&nbsp;=&nbsp;Body&gt; !RefUnwindSafe for Client&lt;C, B&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ResponseFuture","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; !RefUnwindSafe for SendRequest&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, B&gt; !RefUnwindSafe for Connection&lt;T, B&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl&lt;T, B&gt; !RefUnwindSafe for Handshake&lt;T, B&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ResponseFuture","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Parts&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HttpInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Destination","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Connected","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Name","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for GaiResolver","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GaiAddrs","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for GaiFuture","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InvalidNameError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TokioThreadpoolGaiResolver","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TokioThreadpoolGaiFuture","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;I, S, E&gt; RefUnwindSafe for Server&lt;I, S, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, E&gt; RefUnwindSafe for Builder&lt;I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for AddrIncoming","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for AddrStream","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for Http&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, S, E&gt; RefUnwindSafe for Serve&lt;I, S, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F, E&gt; RefUnwindSafe for Connecting&lt;I, F, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S, E&nbsp;=&nbsp;Exec&gt; !RefUnwindSafe for Connection&lt;T, S, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; RefUnwindSafe for Parts&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Upgraded","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for OnUpgrade","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Parts&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["hyper_tls"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for HttpsConnector&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for HttpsConnecting&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for TlsStream&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for MaybeHttpsStream&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["ident_case"] = [{"text":"impl RefUnwindSafe for RenameRule","synthetic":true,"types":[]}];
implementors["idna"] = [{"text":"impl RefUnwindSafe for Flags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Errors","synthetic":true,"types":[]}];
implementors["ignore"] = [{"text":"impl !RefUnwindSafe for DirEntry","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Walk","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for WalkBuilder","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for WalkParallel","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WalkState","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Match&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Glob","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Gitignore","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GitignoreBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Glob&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Override","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OverrideBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Glob&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FileTypeDef","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Types","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypesBuilder","synthetic":true,"types":[]}];
implementors["im_rc"] = [{"text":"impl&lt;K, V, S&nbsp;=&nbsp;RandomState&gt; !RefUnwindSafe for HashMap&lt;K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A, S&nbsp;=&nbsp;RandomState&gt; !RefUnwindSafe for HashSet&lt;A, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; !RefUnwindSafe for OrdMap&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; !RefUnwindSafe for OrdSet&lt;A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; !RefUnwindSafe for Vector&lt;A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, A&gt; !RefUnwindSafe for Iter&lt;'a, A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; !RefUnwindSafe for ConsumingIter&lt;A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, A&gt; !RefUnwindSafe for DiffIter&lt;'a, A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, A&gt; RefUnwindSafe for DiffItem&lt;'a, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; !RefUnwindSafe for OccupiedEntry&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; !RefUnwindSafe for VacantEntry&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, A&gt; !RefUnwindSafe for Iter&lt;'a, A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; !RefUnwindSafe for Keys&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; !RefUnwindSafe for Values&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; !RefUnwindSafe for Entry&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, A&gt; !RefUnwindSafe for Iter&lt;'a, A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, A&gt; !RefUnwindSafe for RangedIter&lt;'a, A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; !RefUnwindSafe for ConsumingIter&lt;A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, A&gt; !RefUnwindSafe for DiffIter&lt;'a, A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; !RefUnwindSafe for OccupiedEntry&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; !RefUnwindSafe for VacantEntry&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; !RefUnwindSafe for Iter&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; !RefUnwindSafe for IterMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; !RefUnwindSafe for ConsumingIter&lt;A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; !RefUnwindSafe for Keys&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; !RefUnwindSafe for Values&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; !RefUnwindSafe for Entry&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, A&gt; !RefUnwindSafe for Iter&lt;'a, A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, A&gt; !RefUnwindSafe for IterMut&lt;'a, A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; !RefUnwindSafe for ConsumingIter&lt;A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, A&gt; !RefUnwindSafe for Iter&lt;'a, A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, A&gt; !RefUnwindSafe for IterMut&lt;'a, A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, A&gt; !RefUnwindSafe for Chunks&lt;'a, A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, A&gt; !RefUnwindSafe for ChunksMut&lt;'a, A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, A&gt; !RefUnwindSafe for Focus&lt;'a, A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, A&gt; !RefUnwindSafe for FocusMut&lt;'a, A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; !RefUnwindSafe for ConsumingIter&lt;A&gt;","synthetic":true,"types":[]}];
implementors["indexmap"] = [{"text":"impl&lt;T, S&gt; RefUnwindSafe for IndexSet&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Drain&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; RefUnwindSafe for Difference&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; RefUnwindSafe for Intersection&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S1, S2&gt; RefUnwindSafe for SymmetricDifference&lt;'a, T, S1, S2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S2: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; RefUnwindSafe for Union&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V, S&gt; RefUnwindSafe for IndexMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for OccupiedEntry&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for VacantEntry&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for Keys&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for Values&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for ValuesMut&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for Iter&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for IterMut&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; RefUnwindSafe for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for Drain&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for Entry&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["intervaltree"] = [{"text":"impl&lt;K, V&gt; RefUnwindSafe for Element&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; RefUnwindSafe for IntervalTree&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for TreeIter&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; RefUnwindSafe for TreeIntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for QueryIter&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["iovec"] = [{"text":"impl RefUnwindSafe for IoVec","synthetic":true,"types":[]}];
implementors["itertools"] = [{"text":"impl&lt;I, J&gt; RefUnwindSafe for Diff&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;J as Iterator&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for MinMaxResult&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Position&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; RefUnwindSafe for EitherOrBoth&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for FoldWhile&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, Pred&gt; RefUnwindSafe for DedupBy&lt;I, Pred&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Pred: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; RefUnwindSafe for Interleave&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; RefUnwindSafe for InterleaveShortest&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; RefUnwindSafe for Product&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for PutBack&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; RefUnwindSafe for Batching&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, R&gt; RefUnwindSafe for MapInto&lt;I, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; RefUnwindSafe for MapResults&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J, F&gt; RefUnwindSafe for MergeBy&lt;I, J, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, F&gt; RefUnwindSafe for TakeWhileRef&lt;'a, I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for WhileSome&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; RefUnwindSafe for Coalesce&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; RefUnwindSafe for TupleCombinations&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as HasCombination&lt;I&gt;&gt;::Combination: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; RefUnwindSafe for Positions&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; RefUnwindSafe for Update&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Step&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for MultiProduct&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Combinations&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for CombinationsWithReplacement&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; RefUnwindSafe for ConsTuples&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for ExactlyOneError&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; !RefUnwindSafe for Format&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, F&gt; !RefUnwindSafe for FormatWith&lt;'a, I, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; !RefUnwindSafe for IntoChunks&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; !RefUnwindSafe for Chunk&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; !RefUnwindSafe for Chunks&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, I, F&gt; !RefUnwindSafe for GroupBy&lt;K, I, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, I, F&gt; !RefUnwindSafe for Group&lt;'a, K, I, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, I, F&gt; !RefUnwindSafe for Groups&lt;'a, K, I, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Intersperse&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; RefUnwindSafe for KMergeBy&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J, F&gt; RefUnwindSafe for MergeJoinBy&lt;I, J, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;J as Iterator&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for MultiPeek&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; RefUnwindSafe for PadUsing&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, F&gt; RefUnwindSafe for PeekingTakeWhile&lt;'a, I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Permutations&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, E&gt; RefUnwindSafe for ProcessResults&lt;'a, I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for PutBackN&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; !RefUnwindSafe for RcIter&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for RepeatN&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for RepeatCall&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; RefUnwindSafe for Unfold&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; RefUnwindSafe for Iterate&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; !RefUnwindSafe for Tee&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for TupleBuffer&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as TupleCollect&gt;::Buffer: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; RefUnwindSafe for TupleWindows&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; RefUnwindSafe for Tuples&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as TupleCollect&gt;::Buffer: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Unique&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, V, F&gt; RefUnwindSafe for UniqueBy&lt;I, V, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for WithPosition&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; RefUnwindSafe for ZipEq&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; RefUnwindSafe for ZipLongest&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Zip&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["itoa"] = [{"text":"impl RefUnwindSafe for Buffer","synthetic":true,"types":[]}];
implementors["jobserver"] = [{"text":"impl RefUnwindSafe for Client","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Acquired","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for HelperThread","synthetic":true,"types":[]}];
implementors["libgit2_sys"] = [{"text":"impl RefUnwindSafe for git_revspec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_oid","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_strarray","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_oidarray","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_signature","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_time","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_clone_options","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_checkout_options","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_checkout_perfdata","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_remote_callbacks","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_fetch_options","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_push_update","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_cert","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_cert_hostkey","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_cert_x509","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_transfer_progress","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_diff_file","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_status_options","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_diff_delta","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_status_entry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_buf","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_blame_options","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_blame_hunk","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_index_entry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_index_time","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_config_entry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_submodule_update_options","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_writestream","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_cred","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_push_options","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_repository_init_options","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_remote_head","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_diff_hunk","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_diff_line","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_diff_options","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_diff_find_options","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_diff_similarity_metric","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_diff_binary","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_diff_binary_file","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_merge_options","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_transport","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_odb_backend","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_refdb_backend","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_proxy_options","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_smart_subtransport_stream","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_smart_subtransport","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_smart_subtransport_definition","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_describe_options","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_describe_format_options","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_stash_apply_options","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_rebase_options","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_rebase_operation","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_cherrypick_options","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_blob","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_branch_iterator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_blame","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_commit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_config","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_config_iterator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_index","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_index_conflict_iterator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_object","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_reference","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_reference_iterator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_annotated_commit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_refdb","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_refspec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_remote","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_repository","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_revwalk","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_submodule","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_tag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_tree","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_tree_entry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_treebuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_push","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_note","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_note_iterator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_status_list","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_pathspec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_pathspec_match_list","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_diff","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_diff_stats","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_patch","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_rebase","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_reflog","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_reflog_entry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_describe_result","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_packbuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_odb","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_odb_stream","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_odb_object","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_odb_writepack","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for git_worktree","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LIBSSH2_SESSION","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LIBSSH2_USERAUTH_KBDINT_PROMPT","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LIBSSH2_USERAUTH_KBDINT_RESPONSE","synthetic":true,"types":[]}];
implementors["libnghttp2_sys"] = [{"text":"impl RefUnwindSafe for nghttp2_session","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for nghttp2_info","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for nghttp2_vec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for nghttp2_rcbuf","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for nghttp2_nv","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for nghttp2_frame_hd","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for nghttp2_data_provider","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for nghttp2_data","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for nghttp2_priority_spec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for nghttp2_headers","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for nghttp2_priority","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for nghttp2_rst_stream","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for nghttp2_settings_entry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for nghttp2_settings","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for nghttp2_push_promise","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for nghttp2_ping","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for nghttp2_goaway","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for nghttp2_window_update","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for nghttp2_extension","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for nghttp2_session_callbacks","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for nghttp2_mem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for nghttp2_option","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for nghttp2_ext_altsvc","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for nghttp2_origin_entry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for nghttp2_ext_origin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for nghttp2_hd_deflater","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for nghttp2_hd_inflater","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for nghttp2_stream","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for nghttp2_data_source","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for nghttp2_frame","synthetic":true,"types":[]}];
implementors["libssh2_sys"] = [{"text":"impl RefUnwindSafe for libssh2_struct_stat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for libssh2_agent_publickey","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for libssh2_knownhost","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LIBSSH2_SFTP_ATTRIBUTES","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LIBSSH2_SFTP_STATVFS","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LIBSSH2_USERAUTH_KBDINT_PROMPT","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LIBSSH2_USERAUTH_KBDINT_RESPONSE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LIBSSH2_SESSION","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LIBSSH2_AGENT","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LIBSSH2_CHANNEL","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LIBSSH2_LISTENER","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LIBSSH2_KNOWNHOSTS","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LIBSSH2_SFTP","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LIBSSH2_SFTP_HANDLE","synthetic":true,"types":[]}];
implementors["libz_sys"] = [{"text":"impl RefUnwindSafe for gz_header","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for z_stream","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gzFile_s","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for internal_state","synthetic":true,"types":[]}];
implementors["lock_api"] = [{"text":"impl RefUnwindSafe for GuardSend","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GuardNoSend","synthetic":true,"types":[]},{"text":"impl&lt;R, T&gt; !RefUnwindSafe for Mutex&lt;R, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, T&gt; !RefUnwindSafe for MutexGuard&lt;'a, R, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, T:&nbsp;?Sized&gt; RefUnwindSafe for MappedMutexGuard&lt;'a, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, G, T&gt; !RefUnwindSafe for ReentrantMutex&lt;R, G, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, G, T&gt; !RefUnwindSafe for ReentrantMutexGuard&lt;'a, R, G, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, G, T&gt; !RefUnwindSafe for MappedReentrantMutexGuard&lt;'a, R, G, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R, T&gt; !RefUnwindSafe for RwLock&lt;R, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, T&gt; !RefUnwindSafe for RwLockReadGuard&lt;'a, R, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, T&gt; !RefUnwindSafe for RwLockWriteGuard&lt;'a, R, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, T&gt; !RefUnwindSafe for RwLockUpgradableReadGuard&lt;'a, R, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, T:&nbsp;?Sized&gt; RefUnwindSafe for MappedRwLockReadGuard&lt;'a, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, T:&nbsp;?Sized&gt; RefUnwindSafe for MappedRwLockWriteGuard&lt;'a, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["log"] = [{"text":"impl&lt;'a&gt; !RefUnwindSafe for Record&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for RecordBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Metadata&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for MetadataBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SetLoggerError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParseLevelError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Level","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LevelFilter","synthetic":true,"types":[]}];
implementors["memchr"] = [{"text":"impl&lt;'a&gt; RefUnwindSafe for Memchr&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Memchr2&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Memchr3&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["memmap"] = [{"text":"impl RefUnwindSafe for MmapOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Mmap","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MmapMut","synthetic":true,"types":[]}];
implementors["mime"] = [{"text":"impl RefUnwindSafe for Mime","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Name&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FromStrError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Params&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["mime_guess"] = [{"text":"impl RefUnwindSafe for MimeGuess","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Iter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IterRaw","synthetic":true,"types":[]}];
implementors["miniz_oxide"] = [{"text":"impl RefUnwindSafe for StreamResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MZFlush","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MZStatus","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MZError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DataFormat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompressionLevel","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompressorOxide","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for CallbackFunc&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompressionStrategy","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TDEFLFlush","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TDEFLStatus","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TINFLStatus","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DecompressorOxide","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InflateState","synthetic":true,"types":[]}];
implementors["mio"] = [{"text":"impl !RefUnwindSafe for Poll","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Registration","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SetReadiness","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PollOpt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ready","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Token","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Events","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for EventedFd&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnixReady","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TcpListener","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TcpStream","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UdpSocket","synthetic":true,"types":[]}];
implementors["mio_uds"] = [{"text":"impl RefUnwindSafe for UnixStream","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnixListener","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnixDatagram","synthetic":true,"types":[]}];
implementors["native_tls"] = [{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Identity","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Certificate","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !RefUnwindSafe for MidHandshakeTlsStream&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TlsConnectorBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TlsConnector","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TlsAcceptorBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TlsAcceptor","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for TlsStream&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !RefUnwindSafe for HandshakeError&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Protocol","synthetic":true,"types":[]}];
implementors["net2"] = [{"text":"impl !RefUnwindSafe for TcpBuilder","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for UdpBuilder","synthetic":true,"types":[]}];
implementors["nix"] = [{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Dir","synthetic":true,"types":[]},{"text":"impl&lt;'d&gt; RefUnwindSafe for Iter&lt;'d&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Entry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Errno","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AtFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OFlag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SealFlag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FdFlag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SpliceFFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FallocateFlags","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for FcntlArg&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FlockArg","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InterfaceAddress","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InterfaceAddressIterator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ModuleInitFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteModuleFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MsFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MntFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MQ_OFlag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FdFlag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MqAttr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InterfaceFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PollFd","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PollFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OpenptyResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ForkptyResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PtyMaster","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CloneFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CpuSet","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for AioCb&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for LioCb&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AioFsyncMode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LioOpcode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LioMode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AioCancelStat","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for Buffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EpollFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EpollCreateFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EpollEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EpollOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EfdFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MemFdCreateFlag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ProtFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MapFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MsFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MlockAllFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MmapAdvise","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Options","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for QuotaValidFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Dqblk","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for QuotaType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for QuotaFmt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RebootMode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FdSet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SigEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SignalIterator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SaFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SigSet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SigAction","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Signal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SigmaskHow","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SigHandler","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SigevNotify","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SfdFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SignalFd","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnixAddr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ipv4Addr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ipv6Addr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LinkAddr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NetlinkAddr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AlgAddr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SockFlag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MsgFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnixCredentials","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IpMembershipRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ipv6MembershipRequest","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for CmsgSpace&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for RecvMsg&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for CmsgIterator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AddressFamily","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SockAddr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InetAddr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IpAddr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SockType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SockProtocol","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ControlMessageOwned","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ControlMessage&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SockLevel","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Shutdown","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReuseAddr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReusePort","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TcpNoDelay","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Linger","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IpAddMembership","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IpDropMembership","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ipv6AddMembership","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ipv6DropMembership","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IpMulticastTtl","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IpMulticastLoop","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReceiveTimeout","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SendTimeout","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Broadcast","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OobInline","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SocketError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KeepAlive","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PeerCredentials","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TcpKeepIdle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RcvBuf","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SndBuf","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RcvBufForce","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SndBufForce","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SockType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AcceptConn","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OriginalDst","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReceiveTimestamp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IpTransparent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Mark","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PassCred","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TcpCongestion","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ipv4PacketInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ipv6RecvPacketInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AlgSetAeadAuthSize","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for AlgSetKey&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SFlag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Mode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FchmodatFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UtimensatFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FsFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Statvfs","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SysInfo","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Termios","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InputFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OutputFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ControlFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LocalFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BaudRate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SetArg","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FlushArg","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FlowArg","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SpecialCharacterIndices","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TimeSpec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TimeVal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RemoteIoVec","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IoVec&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UtsName","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WaitPidFlag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WaitStatus","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AddWatchFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InitFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Inotify","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WatchDescriptor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InotifyEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UContext","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Uid","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Gid","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pid","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AccessFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ForkResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FchownatFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Whence","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PathconfVar","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SysconfVar","synthetic":true,"types":[]}];
implementors["opener"] = [{"text":"impl !RefUnwindSafe for OpenError","synthetic":true,"types":[]}];
implementors["openssl"] = [{"text":"impl RefUnwindSafe for KeyError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AesKey","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Asn1GeneralizedTime","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Asn1GeneralizedTimeRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TimeDiff","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Asn1Time","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Asn1TimeRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Asn1String","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Asn1StringRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Asn1Integer","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Asn1IntegerRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Asn1BitString","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Asn1BitStringRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Asn1Object","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Asn1ObjectRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MsbOption","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BigNumContext","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for BigNumContextRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BigNum","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for BigNumRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CMSOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CmsContentInfo","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for CmsContentInfoRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ConfMethod","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Conf","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ConfRef","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Deriver&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Dh&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for DhRef&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Dsa&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for DsaRef&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PointConversionForm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Asn1Flag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EcGroup","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for EcGroupRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EcPoint","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for EcPointRef","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for EcKey&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for EcKeyRef&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EcdsaSig","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for EcdsaSigRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Seal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Open","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ErrorStack","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; RefUnwindSafe for Index&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MessageDigest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Hasher","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DigestBytes","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SignatureAlgorithms","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Nid","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OcspFlag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OcspResponseStatus","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OcspCertStatus","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OcspRevokedStatus","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for OcspStatus&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OcspBasicResponse","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for OcspBasicResponseRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OcspCertId","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for OcspCertIdRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OcspResponse","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for OcspResponseRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OcspRequest","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for OcspRequestRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OcspOneReq","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for OcspOneReqRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pkcs12","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Pkcs12Ref","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParsedPkcs12","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pkcs12Builder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KeyIvPair","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pkcs7","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Pkcs7Ref","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pkcs7Flags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Id","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for PKey&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for PKeyRef&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Params","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Public","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Private","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Padding","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Rsa&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for RsaRef&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RsaPrivateKeyBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sha1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sha224","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sha256","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sha384","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sha512","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RsaPssSaltlen","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Signer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Verifier&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SrtpProtectionProfile","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SrtpProtectionProfileRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SrtpProfileId","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ConnectConfiguration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SslAcceptor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SslAcceptorBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SslConnector","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SslConnectorBuilder","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ErrorCode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SslOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SslMode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SslMethod","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SslVerifyMode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SslSessionCacheMode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExtensionContext","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SslFiletype","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StatusType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NameType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SniError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SslAlert","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AlpnError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClientHelloResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SslVersion","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SslContextBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SslContext","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SslContextRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CipherBits","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SslCipher","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SslCipherRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SslSession","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SslSessionRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ssl","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SslRef","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !RefUnwindSafe for MidHandshakeSslStream&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for SslStream&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for SslStreamBuilder&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ShutdownState","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !RefUnwindSafe for HandshakeError&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ShutdownResult","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Stack&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Stackable&gt;::StackType: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Stackable&gt;::StackType: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for StackRef&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OpensslString","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for OpensslStringRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Cipher","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Crypter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Mode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509StoreContext","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for X509StoreContextRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509Builder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for X509Ref","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for X509v3Context&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509Extension","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for X509ExtensionRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509NameBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509Name","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for X509NameRef","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for X509NameEntries&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509NameEntry","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for X509NameEntryRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509ReqBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509Req","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for X509ReqRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509VerifyResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GeneralName","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for GeneralNameRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509Algorithm","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for X509AlgorithmRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509CheckFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509VerifyParam","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for X509VerifyParamRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BasicConstraints","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KeyUsage","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExtendedKeyUsage","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SubjectKeyIdentifier","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AuthorityKeyIdentifier","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SubjectAlternativeName","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509StoreBuilder","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for X509StoreBuilderRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509Store","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for X509StoreRef","synthetic":true,"types":[]}];
implementors["openssl_probe"] = [{"text":"impl RefUnwindSafe for ProbeResult","synthetic":true,"types":[]}];
implementors["openssl_sys"] = [{"text":"impl RefUnwindSafe for AES_KEY","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ASN1_ENCODING","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ERR_STRING_DATA","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509V3_CTX","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SHA_CTX","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SHA256_CTX","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SHA512_CTX","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SRTP_PROTECTION_PROFILE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509_VAL","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GENERAL_NAME","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for stack_st_ASN1_OBJECT","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BIO_METHOD","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CMS_ContentInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for stack_st_void","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for point_conversion_form_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EC_METHOD","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EC_GROUP","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EC_POINT","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ECDSA_SIG","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OCSP_CERTID","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OCSP_ONEREQ","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OCSP_REQUEST","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OCSP_BASICRESP","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ASN1_INTEGER","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ASN1_GENERALIZEDTIME","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ASN1_STRING","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ASN1_BIT_STRING","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ASN1_TIME","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ASN1_TYPE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ASN1_OBJECT","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ASN1_OCTET_STRING","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for bio_st","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BIO","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BIGNUM","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BN_BLINDING","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BN_MONT_CTX","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BN_CTX","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BN_GENCB","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EVP_CIPHER","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EVP_CIPHER_CTX","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EVP_MD","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EVP_MD_CTX","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EVP_PKEY","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EVP_PKEY_ASN1_METHOD","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EVP_PKEY_CTX","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HMAC_CTX","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DH","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DH_METHOD","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DSA","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DSA_METHOD","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RSA","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RSA_METHOD","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EC_KEY","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509_ALGOR","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509_CRL","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509_NAME","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509_STORE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509_STORE_CTX","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509_VERIFY_PARAM","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CONF","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OPENSSL_INIT_SETTINGS","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ENGINE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SSL","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SSL_CTX","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for COMP_METHOD","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CRYPTO_EX_DATA","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OCSP_RESPONSE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PKCS12","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PKCS7_SIGNED","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PKCS7_ENVELOPE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PKCS7_SIGN_ENVELOPE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PKCS7_DIGEST","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PKCS7_ENCRYPT","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PKCS7","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for stack_st_OPENSSL_STRING","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SSL_METHOD","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SSL_CIPHER","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SSL_SESSION","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for stack_st_SSL_CIPHER","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for stack_st_SRTP_PROTECTION_PROFILE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OPENSSL_STACK","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509_NAME_ENTRY","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for stack_st_X509_NAME","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509_EXTENSION","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for stack_st_X509_EXTENSION","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for stack_st_X509_ATTRIBUTE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509_REQ_INFO","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509_REQ","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509_CINF","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for stack_st_X509","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CONF_METHOD","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for stack_st_GENERAL_NAME","synthetic":true,"types":[]}];
implementors["parking_lot"] = [{"text":"impl RefUnwindSafe for Condvar","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WaitTimeoutResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Once","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RawMutex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RawRwLock","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RawThreadId","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OnceState","synthetic":true,"types":[]}];
implementors["parking_lot_core"] = [{"text":"impl RefUnwindSafe for ParkToken","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnparkResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnparkToken","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SpinWait","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FilterOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParkResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RequeueOp","synthetic":true,"types":[]}];
implementors["percent_encoding"] = [{"text":"impl RefUnwindSafe for SIMPLE_ENCODE_SET","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for QUERY_ENCODE_SET","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DEFAULT_ENCODE_SET","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PATH_SEGMENT_ENCODE_SET","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for USERINFO_ENCODE_SET","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; RefUnwindSafe for PercentEncode&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for PercentDecode&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl !RefUnwindSafe for TokenStream","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for LexError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Span","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Group","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Punct","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Ident","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Literal","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TokenTree","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Delimiter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Spacing","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for IntoIter","synthetic":true,"types":[]}];
implementors["proc_macro_error"] = [{"text":"impl !RefUnwindSafe for Diagnostic","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Level","synthetic":true,"types":[]}];
implementors["publicsuffix"] = [{"text":"impl RefUnwindSafe for List","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Domain","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DnsName","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Host","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ErrorKind","synthetic":true,"types":[]}];
implementors["quick_error"] = [{"text":"impl&lt;X, E&gt; RefUnwindSafe for Context&lt;X, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;X: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rand"] = [{"text":"impl RefUnwindSafe for Bernoulli","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Open01","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OpenClosed01","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Alphanumeric","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; RefUnwindSafe for Uniform&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;X as SampleUniform&gt;::Sampler: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Binomial","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Cauchy","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Dirichlet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Exp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Exp1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Beta","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChiSquared","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FisherF","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Gamma","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StudentT","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LogNormal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Normal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StandardNormal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pareto","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Poisson","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Triangular","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnitCircle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnitSphereSurface","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Weibull","synthetic":true,"types":[]},{"text":"impl&lt;D, R, T&gt; RefUnwindSafe for DistIter&lt;D, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Standard","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BernoulliError","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; RefUnwindSafe for UniformInt&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; RefUnwindSafe for UniformFloat&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UniformDuration","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; RefUnwindSafe for WeightedIndex&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;X as SampleUniform&gt;::Sampler: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WeightedError","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for WeightedIndex&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;W as SampleUniform&gt;::Sampler: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EntropyRng","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StdRng","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ThreadRng","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ReadError","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for ReadRng&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Rsdr&gt; RefUnwindSafe for ReseedingRng&lt;R, Rsdr&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Rsdr: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StepRng","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized, T&gt; RefUnwindSafe for SliceChooseIter&lt;'a, S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IndexVec","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for IndexVecIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IndexVecIntoIter","synthetic":true,"types":[]}];
implementors["rand_chacha"] = [{"text":"impl RefUnwindSafe for ChaCha12Core","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChaCha12Rng","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChaCha20Core","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChaCha20Rng","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChaCha8Core","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChaCha8Rng","synthetic":true,"types":[]}];
implementors["rand_core"] = [{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OsRng","synthetic":true,"types":[]},{"text":"impl&lt;R:&nbsp;?Sized&gt; RefUnwindSafe for BlockRng&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R:&nbsp;?Sized&gt; RefUnwindSafe for BlockRng64&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rand_hc"] = [{"text":"impl RefUnwindSafe for Hc128Rng","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Hc128Core","synthetic":true,"types":[]}];
implementors["rand_isaac"] = [{"text":"impl RefUnwindSafe for IsaacRng","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IsaacCore","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Isaac64Rng","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Isaac64Core","synthetic":true,"types":[]}];
implementors["rand_jitter"] = [{"text":"impl RefUnwindSafe for JitterRng","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TimerError","synthetic":true,"types":[]}];
implementors["rand_os"] = [{"text":"impl RefUnwindSafe for OsRng","synthetic":true,"types":[]}];
implementors["rand_pcg"] = [{"text":"impl RefUnwindSafe for Lcg64Xsh32","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Mcg128Xsl64","synthetic":true,"types":[]}];
implementors["rand_xorshift"] = [{"text":"impl RefUnwindSafe for XorShiftRng","synthetic":true,"types":[]}];
implementors["regex"] = [{"text":"impl RefUnwindSafe for RegexSetBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RegexBuilder","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for RegexSet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SetMatches","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SetMatchesIntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SetMatchesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CaptureLocations","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !RefUnwindSafe for CaptureMatches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r&gt; RefUnwindSafe for CaptureNames&lt;'r&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; RefUnwindSafe for Captures&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; RefUnwindSafe for Match&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !RefUnwindSafe for Matches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; RefUnwindSafe for NoExpand&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Regex","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; RefUnwindSafe for ReplacerRef&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !RefUnwindSafe for Split&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !RefUnwindSafe for SplitN&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 't&gt; RefUnwindSafe for SubCaptureMatches&lt;'c, 't&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RegexBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RegexSetBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; RefUnwindSafe for Match&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Regex","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !RefUnwindSafe for Matches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !RefUnwindSafe for CaptureMatches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !RefUnwindSafe for Split&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !RefUnwindSafe for SplitN&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r&gt; RefUnwindSafe for CaptureNames&lt;'r&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CaptureLocations","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; RefUnwindSafe for Captures&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 't&gt; RefUnwindSafe for SubCaptureMatches&lt;'c, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; RefUnwindSafe for ReplacerRef&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; RefUnwindSafe for NoExpand&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for RegexSet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SetMatches","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SetMatchesIntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SetMatchesIter&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["regex_automata"] = [{"text":"impl&lt;D&gt; RefUnwindSafe for Regex&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; RefUnwindSafe for DenseDFA&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; RefUnwindSafe for SparseDFA&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; RefUnwindSafe for Standard&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; RefUnwindSafe for ByteClass&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; RefUnwindSafe for Premultiplied&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; RefUnwindSafe for PremultipliedByteClass&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; RefUnwindSafe for Standard&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; RefUnwindSafe for ByteClass&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["regex_syntax"] = [{"text":"impl !RefUnwindSafe for Parser","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParserBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnicodeWordError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Span","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Position","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WithComments","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Comment","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Alternation","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Concat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Literal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassPerl","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassAscii","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassUnicode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassBracketed","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassSetRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassSetUnion","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassSetBinaryOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Assertion","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Repetition","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RepetitionOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Group","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CaptureName","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SetFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Flags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FlagsItem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ErrorKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ast","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LiteralKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SpecialLiteralKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HexLiteralKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Class","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassPerlKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassAsciiKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassUnicodeKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassUnicodeOpKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassSet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassSetItem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassSetBinaryOpKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AssertionKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RepetitionKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RepetitionRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GroupKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FlagsItemKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Flag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParserBuilder","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Parser","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Printer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CaseFoldError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Hir","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassUnicode","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ClassUnicodeIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassUnicodeRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassBytes","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ClassBytesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassBytesRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Group","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Repetition","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ErrorKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HirKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Literal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Class","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Anchor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WordBoundary","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GroupKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RepetitionKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RepetitionRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Literals","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Literal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Printer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TranslatorBuilder","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Translator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Utf8Range","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Utf8Sequences","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Utf8Sequence","synthetic":true,"types":[]}];
implementors["reqwest"] = [{"text":"impl !RefUnwindSafe for Client","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ClientBuilder","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Body","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Proxy","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RedirectAction","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for RedirectAttempt&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for RedirectPolicy","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for RequestBuilder","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Response","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Certificate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Identity","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Body","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Chunk","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Client","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ClientBuilder","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Decoder","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Form","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Part","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for RequestBuilder","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Response","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CookieParseError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Cookie&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Form","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Part","synthetic":true,"types":[]}];
implementors["rustc"] = [{"text":"impl RefUnwindSafe for CorpusCallbacks","synthetic":true,"types":[]}];
implementors["rustc_hash"] = [{"text":"impl RefUnwindSafe for FxHasher","synthetic":true,"types":[]}];
implementors["rustfix"] = [{"text":"impl RefUnwindSafe for LinePosition","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LineRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Suggestion","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Solution","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Snippet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Replacement","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for CodeFix","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Filter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Diagnostic","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DiagnosticSpan","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DiagnosticSpanLine","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DiagnosticCode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Applicability","synthetic":true,"types":[]}];
implementors["rustwide"] = [{"text":"impl&lt;'b&gt; !RefUnwindSafe for Build&lt;'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for BuildBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for BuildDirectory","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Crate","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Workspace","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WorkspaceBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PrepareError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SandboxImage","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SandboxBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'w, 'pl&gt; !RefUnwindSafe for Command&lt;'w, 'pl&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ProcessOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MountKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CommandError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Binary","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LogStorage","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DistToolchain","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CiToolchain","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Toolchain","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ToolchainError","synthetic":true,"types":[]}];
implementors["same_file"] = [{"text":"impl RefUnwindSafe for Handle","synthetic":true,"types":[]}];
implementors["scopeguard"] = [{"text":"impl&lt;T, F, S&gt; RefUnwindSafe for ScopeGuard&lt;T, F, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Always","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OnUnwind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OnSuccess","synthetic":true,"types":[]}];
implementors["scroll"] = [{"text":"impl RefUnwindSafe for Uleb128","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sleb128","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Endian","synthetic":true,"types":[]},{"text":"impl&lt;T&nbsp;=&nbsp;usize&gt; !RefUnwindSafe for Error&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StrCtx","synthetic":true,"types":[]}];
implementors["semver"] = [{"text":"impl RefUnwindSafe for Version","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VersionReq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Identifier","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SemVerError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReqParseError","synthetic":true,"types":[]}];
implementors["semver_parser"] = [{"text":"impl RefUnwindSafe for Version","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Identifier","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VersionReq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Predicate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WildcardVersion","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Op","synthetic":true,"types":[]}];
implementors["serde"] = [{"text":"impl RefUnwindSafe for IgnoredAny","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Unexpected&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for UnitDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for BoolDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for I8Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for I16Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for I32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for I64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for IsizeDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for U8Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for U16Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for U64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for UsizeDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for F32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for F64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for CharDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for I128Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for U128Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for U32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; RefUnwindSafe for StrDeserializer&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; RefUnwindSafe for BorrowedStrDeserializer&lt;'de, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for StringDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; RefUnwindSafe for CowStrDeserializer&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; RefUnwindSafe for BorrowedBytesDeserializer&lt;'de, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, E&gt; RefUnwindSafe for SeqDeserializer&lt;I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for SeqAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, I, E&gt; RefUnwindSafe for MapDeserializer&lt;'de, I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;I as Iterator&gt;::Item as Pair&gt;::Second: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for MapAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Ok, Error&gt; RefUnwindSafe for Impossible&lt;Ok, Error&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Error: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["serde_ignored"] = [{"text":"impl&lt;'a, 'b, D, F&gt; RefUnwindSafe for Deserializer&lt;'a, 'b, D, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Path&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["serde_json"] = [{"text":"impl&lt;R&gt; RefUnwindSafe for Deserializer&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, R, T&gt; RefUnwindSafe for StreamDeserializer&lt;'de, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;W, F&gt; RefUnwindSafe for Serializer&lt;W, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; RefUnwindSafe for Map&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Number","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Value","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for IoRead&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SliceRead&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for StrRead&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Category","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for VacantEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for OccupiedEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for IterMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Keys&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Values&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ValuesMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Entry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompactFormatter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for PrettyFormatter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CharEscape","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RawValue","synthetic":true,"types":[]}];
implementors["serde_urlencoded"] = [{"text":"impl&lt;'de&gt; RefUnwindSafe for Deserializer&lt;'de&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'input, 'output, Target&gt; !RefUnwindSafe for Serializer&lt;'input, 'output, Target&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'input, 'output, Target&gt; !RefUnwindSafe for SeqSerializer&lt;'input, 'output, Target&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'input, 'output, Target&gt; !RefUnwindSafe for TupleSerializer&lt;'input, 'output, Target&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'input, 'output, T&gt; !RefUnwindSafe for TupleStructSerializer&lt;'input, 'output, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'input, 'output, T&gt; !RefUnwindSafe for TupleVariantSerializer&lt;'input, 'output, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'input, 'output, Target&gt; !RefUnwindSafe for MapSerializer&lt;'input, 'output, Target&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'input, 'output, Target&gt; !RefUnwindSafe for StructSerializer&lt;'input, 'output, Target&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'input, 'output, T&gt; !RefUnwindSafe for StructVariantSerializer&lt;'input, 'output, T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]}];
implementors["signal_hook"] = [{"text":"impl RefUnwindSafe for Signals","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Pending&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Forever&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["signal_hook_registry"] = [{"text":"impl RefUnwindSafe for SigId","synthetic":true,"types":[]}];
implementors["simplelog"] = [{"text":"impl RefUnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ConfigBuilder","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for CombinedLogger","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SimpleLogger","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for WriteLogger&lt;W&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TermLogger","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LevelPadding","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TermLogError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TerminalMode","synthetic":true,"types":[]}];
implementors["sized_chunks"] = [{"text":"impl&lt;Size&gt; RefUnwindSafe for Bitmap&lt;Size&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Size as Bits&gt;::Store: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Size&gt; RefUnwindSafe for Iter&lt;Size&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Size as Bits&gt;::Store: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, T&gt; RefUnwindSafe for InlineArray&lt;A, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, T&gt; RefUnwindSafe for Iter&lt;A, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, T&gt; RefUnwindSafe for Drain&lt;'a, A, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, N&gt; RefUnwindSafe for Drain&lt;'a, A, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;N as ChunkLength&lt;A&gt;&gt;::SizedType: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, N&gt; RefUnwindSafe for Iter&lt;'a, A, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;N as ChunkLength&lt;A&gt;&gt;::SizedType: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, N&gt; RefUnwindSafe for IterMut&lt;'a, A, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;N as ChunkLength&lt;A&gt;&gt;::SizedType: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, N&gt; RefUnwindSafe for OwnedIter&lt;A, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;N as ChunkLength&lt;A&gt;&gt;::SizedType: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, N&gt; RefUnwindSafe for Slice&lt;'a, A, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;N as ChunkLength&lt;A&gt;&gt;::SizedType: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, N&gt; RefUnwindSafe for SliceMut&lt;'a, A, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;N as ChunkLength&lt;A&gt;&gt;::SizedType: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, N&gt; RefUnwindSafe for RingBuffer&lt;A, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;N as ChunkLength&lt;A&gt;&gt;::SizedType: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, N&gt; RefUnwindSafe for Chunk&lt;A, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;N as ChunkLength&lt;A&gt;&gt;::SizedType: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, N&gt; RefUnwindSafe for Iter&lt;A, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;N as ChunkLength&lt;A&gt;&gt;::SizedType: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, N&gt; RefUnwindSafe for Drain&lt;'a, A, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;N as ChunkLength&lt;A&gt;&gt;::SizedType: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, N&gt; RefUnwindSafe for SparseChunk&lt;A, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;N as ChunkLength&lt;A&gt;&gt;::SizedType: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;N as Bits&gt;::Store: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, N&gt; RefUnwindSafe for Iter&lt;'a, A, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;N as ChunkLength&lt;A&gt;&gt;::SizedType: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;N as Bits&gt;::Store: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, N&gt; RefUnwindSafe for IterMut&lt;'a, A, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;N as ChunkLength&lt;A&gt;&gt;::SizedType: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;N as Bits&gt;::Store: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, N&gt; RefUnwindSafe for Drain&lt;A, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;N as ChunkLength&lt;A&gt;&gt;::SizedType: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;N as Bits&gt;::Store: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["slab"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for Slab&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for VacantEntry&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for IterMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Drain&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["smallvec"] = [{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Drain&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for SmallVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for IntoIter&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["socket2"] = [{"text":"impl RefUnwindSafe for Socket","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SockAddr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Domain","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Protocol","synthetic":true,"types":[]}];
implementors["string"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for String&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["strip_ansi_escapes"] = [{"text":"impl&lt;W&gt; !RefUnwindSafe for Writer&lt;W&gt;","synthetic":true,"types":[]}];
implementors["strsim"] = [{"text":"impl RefUnwindSafe for StrSimError","synthetic":true,"types":[]}];
implementors["syn"] = [{"text":"impl !RefUnwindSafe for Attribute","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for MetaList","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for MetaNameValue","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Field","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for FieldsNamed","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for FieldsUnnamed","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Variant","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for VisCrate","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for VisPublic","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for VisRestricted","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprArray","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprAssign","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprAssignOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprAsync","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExprBinary","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprBlock","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprBox","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprBreak","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExprCall","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExprCast","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprClosure","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprContinue","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExprField","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprForLoop","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprGroup","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprIf","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprInPlace","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExprIndex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprLet","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExprLit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprLoop","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprMacro","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprMatch","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprMethodCall","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExprParen","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExprPath","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprReference","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprRepeat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprReturn","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprStruct","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprTry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprTryBlock","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprTuple","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprType","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExprUnary","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprUnsafe","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExprVerbatim","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprWhile","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprYield","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Index","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for BoundLifetimes","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ConstParam","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Generics","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for LifetimeDef","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PredicateEq","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PredicateLifetime","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PredicateType","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TraitBound","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TypeParam","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for WhereClause","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for ImplGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for Turbofish&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for TypeGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Lifetime","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for LitBool","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for LitByte","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for LitByteStr","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for LitChar","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for LitFloat","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for LitInt","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for LitStr","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for LitVerbatim","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Macro","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for DataEnum","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for DataStruct","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for DataUnion","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for DeriveInput","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Abi","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for BareFnArg","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TypeArray","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TypeBareFn","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TypeGroup","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TypeImplTrait","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TypeInfer","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TypeMacro","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TypeNever","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TypeParen","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TypePath","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TypePtr","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TypeReference","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TypeSlice","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TypeTraitObject","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TypeTuple","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TypeVerbatim","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for AngleBracketedGenericArguments","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Binding","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Constraint","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ParenthesizedGenericArguments","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Path","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PathSegment","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for QSelf","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for AttrStyle","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Meta","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for NestedMeta","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Fields","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Visibility","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Expr","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Member","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for GenericParam","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TraitBoundModifier","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TypeParamBound","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for WherePredicate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FloatSuffix","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IntSuffix","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Lit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StrStyle","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for MacroDelimiter","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Data","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for BinOp","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for UnOp","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for BareFnArgName","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ReturnType","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for GenericArgument","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PathArguments","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Underscore","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Abstract","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for As","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Async","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Auto","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Become","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Box","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Break","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Const","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Continue","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Crate","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Default","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Do","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Dyn","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Else","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Enum","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Existential","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Extern","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Final","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Fn","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for For","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for If","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Impl","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for In","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Let","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Loop","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Macro","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Match","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Mod","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Move","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Mut","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Override","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Priv","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Pub","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Ref","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Return","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SelfType","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SelfValue","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Static","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Struct","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Super","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Trait","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Try","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Typeof","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Union","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Unsafe","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Unsized","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Use","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Virtual","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Where","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for While","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Yield","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Add","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for AddEq","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for And","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for AndAnd","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for AndEq","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for At","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Bang","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Caret","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for CaretEq","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Colon","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Colon2","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Comma","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Div","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for DivEq","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Dollar","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Dot","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Dot2","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Dot3","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for DotDotEq","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Eq","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for EqEq","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Ge","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Gt","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Le","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Lt","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for MulEq","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Ne","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Or","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for OrEq","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for OrOr","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Pound","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Question","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for RArrow","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for LArrow","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Rem","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for RemEq","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for FatArrow","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Semi","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Shl","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ShlEq","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Shr","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ShrEq","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Star","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Sub","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SubEq","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Tilde","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Brace","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Bracket","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Paren","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Group","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TokenBuffer","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for Cursor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; RefUnwindSafe for Punctuated&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; RefUnwindSafe for Pairs&lt;'a, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; RefUnwindSafe for PairsMut&lt;'a, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; RefUnwindSafe for IntoPairs&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; RefUnwindSafe for IntoIter&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; RefUnwindSafe for Pair&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for Lookahead1&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for ParseBuffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 'a&gt; !RefUnwindSafe for StepCursor&lt;'c, 'a&gt;","synthetic":true,"types":[]}];
implementors["syn_mid"] = [{"text":"impl !RefUnwindSafe for Receiver","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PatIdent","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PatPath","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PatReference","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PatStruct","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PatTuple","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PatTupleStruct","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PatType","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PatWild","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for FieldPat","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Block","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ItemFn","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for FnArg","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Pat","synthetic":true,"types":[]}];
implementors["synstructure"] = [{"text":"impl&lt;'a&gt; !RefUnwindSafe for BindingInfo&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for VariantAst&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for VariantInfo&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for Structure&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AddBounds","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BindStyle","synthetic":true,"types":[]}];
implementors["tar"] = [{"text":"impl&lt;R&gt; !RefUnwindSafe for Archive&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; !RefUnwindSafe for Entries&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for Builder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; !RefUnwindSafe for Entry&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GnuExtSparseHeader","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GnuHeader","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GnuSparseHeader","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Header","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OldHeader","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UstarHeader","synthetic":true,"types":[]},{"text":"impl&lt;'entry&gt; RefUnwindSafe for PaxExtension&lt;'entry&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'entry&gt; RefUnwindSafe for PaxExtensions&lt;'entry&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Unpacked","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EntryType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HeaderMode","synthetic":true,"types":[]}];
implementors["tempdir"] = [{"text":"impl RefUnwindSafe for TempDir","synthetic":true,"types":[]}];
implementors["tempfile"] = [{"text":"impl RefUnwindSafe for TempDir","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NamedTempFile","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PathPersistError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PersistError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TempPath","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SpooledTempFile","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; RefUnwindSafe for Builder&lt;'a, 'b&gt;","synthetic":true,"types":[]}];
implementors["term"] = [{"text":"impl RefUnwindSafe for Attr","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TermInfo","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for TerminfoTerminal&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Variables","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Param","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]}];
implementors["termcolor"] = [{"text":"impl RefUnwindSafe for StandardStream","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for StandardStreamLock&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BufferedStandardStream","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BufferWriter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Buffer","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for NoColor&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for Ansi&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ColorSpec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParseColorError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ColorChoice","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Color","synthetic":true,"types":[]}];
implementors["textwrap"] = [{"text":"impl RefUnwindSafe for HyphenSplitter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NoHyphenation","synthetic":true,"types":[]},{"text":"impl&lt;'a, S&gt; RefUnwindSafe for Wrapper&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, S&gt; RefUnwindSafe for IntoWrapIter&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'w, 'a, S&gt; RefUnwindSafe for WrapIter&lt;'w, 'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["thread_local"] = [{"text":"impl&lt;T:&nbsp;?Sized&gt; RefUnwindSafe for ThreadLocal&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for CachedThreadLocal&lt;T&gt;","synthetic":true,"types":[]}];
implementors["time"] = [{"text":"impl RefUnwindSafe for Duration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OutOfRangeError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Timespec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PreciseTime","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SteadyTime","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Tm","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for TmFmt&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParseError","synthetic":true,"types":[]}];
implementors["tokio"] = [{"text":"impl RefUnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FrameTooBig","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LengthDelimitedCodec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Spawn","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Runtime","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Shutdown","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TaskExecutor","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Runtime","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Handle","synthetic":true,"types":[]}];
implementors["tokio_buf"] = [{"text":"impl RefUnwindSafe for SizeHint","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; RefUnwindSafe for Chain&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; RefUnwindSafe for Collect&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as FromBufStream&lt;&lt;T as BufStream&gt;::Item&gt;&gt;::Builder: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Limit&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IntoStream&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; RefUnwindSafe for CollectError&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CollectVecError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CollectBytesError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for LimitError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["tokio_codec"] = [{"text":"impl RefUnwindSafe for BytesCodec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LinesCodec","synthetic":true,"types":[]}];
implementors["tokio_current_thread"] = [{"text":"impl&lt;P&nbsp;=&nbsp;ParkThread&gt; !RefUnwindSafe for CurrentThread&lt;P&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TaskExecutor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Turn","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; !RefUnwindSafe for Entered&lt;'a, P&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RunError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RunTimeoutError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TurnError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for BlockError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Handle","synthetic":true,"types":[]}];
implementors["tokio_executor"] = [{"text":"impl !RefUnwindSafe for Enter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EnterError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SpawnError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DefaultExecutor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DefaultGuard","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ParkThread","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParkError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for UnparkThread","synthetic":true,"types":[]}];
implementors["tokio_fs"] = [{"text":"impl&lt;P&gt; RefUnwindSafe for CreateDirFuture&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; RefUnwindSafe for CreateDirAllFuture&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OpenOptions","synthetic":true,"types":[]},{"text":"impl&lt;P, Q&gt; RefUnwindSafe for HardLinkFuture&lt;P, Q&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Q: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; RefUnwindSafe for MetadataFuture&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; RefUnwindSafe for ReadFile&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DirEntry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReadDir","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; RefUnwindSafe for ReadDirFuture&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; RefUnwindSafe for ReadLinkFuture&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; RefUnwindSafe for RemoveDirFuture&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; RefUnwindSafe for RemoveFileFuture&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P, Q&gt; RefUnwindSafe for RenameFuture&lt;P, Q&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Q: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; RefUnwindSafe for SetPermissionsFuture&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Stderr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Stdin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Stdout","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; RefUnwindSafe for SymlinkMetadataFuture&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P, C&gt; RefUnwindSafe for WriteFile&lt;P, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CloneFuture","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; RefUnwindSafe for CreateFuture&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MetadataFuture","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; RefUnwindSafe for OpenFuture&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SeekFuture","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for File","synthetic":true,"types":[]},{"text":"impl&lt;P, Q&gt; RefUnwindSafe for SymlinkFuture&lt;P, Q&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Q: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["tokio_io"] = [{"text":"impl&lt;R, W&gt; RefUnwindSafe for Copy&lt;R, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for Flush&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, T&gt; RefUnwindSafe for Read&lt;R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, T&gt; RefUnwindSafe for ReadExact&lt;A, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for ReadToEnd&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for ReadUntil&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for Shutdown&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, T&gt; RefUnwindSafe for WriteAll&lt;A, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for AllowStdIo&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for Lines&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for ReadHalf&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for WriteHalf&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Window&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["tokio_process"] = [{"text":"impl !RefUnwindSafe for Child","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for WaitWithOutput","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for StatusAsync","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for OutputAsync","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ChildStdin","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ChildStdout","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ChildStderr","synthetic":true,"types":[]}];
implementors["tokio_reactor"] = [{"text":"impl !RefUnwindSafe for Background","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Shutdown","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; !RefUnwindSafe for PollEvented&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Registration","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Reactor","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Handle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Turn","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SetFallbackError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DefaultGuard","synthetic":true,"types":[]}];
implementors["tokio_signal"] = [{"text":"impl !RefUnwindSafe for Signal","synthetic":true,"types":[]}];
implementors["tokio_sync"] = [{"text":"impl&lt;T&gt; !RefUnwindSafe for Lock&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for LockGuard&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for UnboundedReceiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for UnboundedSender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SendError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for TrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RecvError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnboundedSendError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for UnboundedTrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnboundedRecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RecvError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TryRecvError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Semaphore","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Permit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AcquireError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TryAcquireError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for AtomicTask","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Ref&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["tokio_tcp"] = [{"text":"impl !RefUnwindSafe for Incoming","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TcpListener","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TcpStream","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ConnectFuture","synthetic":true,"types":[]}];
implementors["tokio_threadpool"] = [{"text":"impl RefUnwindSafe for BlockingError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Sender","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Shutdown","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; !RefUnwindSafe for SpawnHandle&lt;T, E&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ThreadPool","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Worker","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WorkerId","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for DefaultPark","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for DefaultUnpark","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParkError","synthetic":true,"types":[]}];
implementors["tokio_timer"] = [{"text":"impl !RefUnwindSafe for Delay","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for DelayQueue&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Interval","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Timeout&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Clock","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DefaultGuard","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Expired&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Key","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Throttle&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for ThrottleError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Error&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DefaultGuard","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Handle","synthetic":true,"types":[]},{"text":"impl&lt;T, N&nbsp;=&nbsp;Clock&gt; !RefUnwindSafe for Timer&lt;T, N&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Turn","synthetic":true,"types":[]}];
implementors["tokio_tls"] = [{"text":"impl&lt;S&gt; RefUnwindSafe for TlsStream&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TlsConnector","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TlsAcceptor","synthetic":true,"types":[]}];
implementors["tokio_udp"] = [{"text":"impl&lt;C&gt; !RefUnwindSafe for UdpFramed&lt;C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for RecvDgram&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for SendDgram&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for UdpSocket","synthetic":true,"types":[]}];
implementors["tokio_uds"] = [{"text":"impl !RefUnwindSafe for UnixDatagram","synthetic":true,"types":[]},{"text":"impl&lt;A, C&gt; !RefUnwindSafe for UnixDatagramFramed&lt;A, C&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Incoming","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for UnixListener","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for RecvDgram&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; !RefUnwindSafe for SendDgram&lt;T, P&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for UnixStream","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ConnectFuture","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UCred","synthetic":true,"types":[]}];
implementors["tokio_util"] = [{"text":"impl RefUnwindSafe for BytesCodec","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; RefUnwindSafe for Framed&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; RefUnwindSafe for FramedParts&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, D&gt; RefUnwindSafe for FramedRead&lt;T, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; RefUnwindSafe for FramedWrite&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LinesCodec","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for LinesCodecError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LengthDelimitedCodecError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LengthDelimitedCodec","synthetic":true,"types":[]}];
implementors["toml"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for Spanned&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; RefUnwindSafe for Map&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for VacantEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for OccupiedEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for IterMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Keys&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Values&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Entry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Datetime","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DatetimeParseError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Value","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for Serializer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Deserializer&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["try_from"] = [{"text":"impl RefUnwindSafe for TryFromIntToCharError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TryFromIntError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Void","synthetic":true,"types":[]}];
implementors["try_lock"] = [{"text":"impl&lt;T&gt; !RefUnwindSafe for TryLock&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for Locked&lt;'a, T&gt;","synthetic":true,"types":[]}];
implementors["unicode_bidi"] = [{"text":"impl RefUnwindSafe for ParagraphInfo","synthetic":true,"types":[]},{"text":"impl&lt;'text&gt; RefUnwindSafe for InitialInfo&lt;'text&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'text&gt; RefUnwindSafe for BidiInfo&lt;'text&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BidiClass","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Level","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]}];
implementors["unicode_normalization"] = [{"text":"impl&lt;I&gt; RefUnwindSafe for Decompositions&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Recompositions&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for StreamSafe&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IsNormalized","synthetic":true,"types":[]}];
implementors["url"] = [{"text":"impl RefUnwindSafe for OpaqueOrigin","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for HostAndPort&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SocketAddrs","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for PathSegmentsMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Url","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for ParseOptions&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for UrlQuery&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Origin","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for Host&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParseError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SyntaxViolation","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Position","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Parse&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ParseIntoOwned&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ByteSerialize&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Serializer&lt;T&gt;","synthetic":true,"types":[]}];
implementors["uuid"] = [{"text":"impl RefUnwindSafe for BytesError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Uuid","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Version","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Variant","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Hyphenated","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for HyphenatedRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Simple","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SimpleRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Urn","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for UrnRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Expected","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParseError","synthetic":true,"types":[]}];
implementors["vec_map"] = [{"text":"impl&lt;V&gt; RefUnwindSafe for VecMap&lt;V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; RefUnwindSafe for VacantEntry&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; RefUnwindSafe for OccupiedEntry&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; RefUnwindSafe for Iter&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; RefUnwindSafe for IterMut&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; RefUnwindSafe for Keys&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; RefUnwindSafe for Values&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; RefUnwindSafe for ValuesMut&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;V&gt; RefUnwindSafe for IntoIter&lt;V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; RefUnwindSafe for Drain&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; RefUnwindSafe for Entry&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["void"] = [{"text":"impl RefUnwindSafe for Void","synthetic":true,"types":[]}];
implementors["walkdir"] = [{"text":"impl RefUnwindSafe for DirEntry","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for WalkDir","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for IntoIter","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; RefUnwindSafe for FilterEntry&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["want"] = [{"text":"impl !RefUnwindSafe for Giver","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Taker","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SharedGiver","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Closed","synthetic":true,"types":[]}];
implementors["xattr"] = [{"text":"impl RefUnwindSafe for UnsupportedPlatformError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XAttrs","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()