(function() {var implementors = {};
implementors["cargo"] = [{"text":"impl FromStr for Edition","synthetic":false,"types":[]},{"text":"impl FromStr for EncodablePackageId","synthetic":false,"types":[]},{"text":"impl FromStr for VersionControl","synthetic":false,"types":[]}];
implementors["cargo_platform"] = [{"text":"impl FromStr for Cfg","synthetic":false,"types":[]},{"text":"impl FromStr for CfgExpr","synthetic":false,"types":[]},{"text":"impl FromStr for Platform","synthetic":false,"types":[]}];
implementors["chrono"] = [{"text":"impl FromStr for NaiveDate","synthetic":false,"types":[]},{"text":"impl FromStr for NaiveTime","synthetic":false,"types":[]},{"text":"impl FromStr for NaiveDateTime","synthetic":false,"types":[]},{"text":"impl FromStr for DateTime&lt;FixedOffset&gt;","synthetic":false,"types":[]},{"text":"impl FromStr for DateTime&lt;Utc&gt;","synthetic":false,"types":[]},{"text":"impl FromStr for DateTime&lt;Local&gt;","synthetic":false,"types":[]},{"text":"impl FromStr for Weekday","synthetic":false,"types":[]}];
implementors["clap"] = [{"text":"impl FromStr for AppSettings","synthetic":false,"types":[]},{"text":"impl FromStr for ArgSettings","synthetic":false,"types":[]},{"text":"impl FromStr for Shell","synthetic":false,"types":[]}];
implementors["cookie"] = [{"text":"impl FromStr for Cookie&lt;'static&gt;","synthetic":false,"types":[]}];
implementors["git2"] = [{"text":"impl FromStr for Oid","synthetic":false,"types":[]}];
implementors["glob"] = [{"text":"impl FromStr for Pattern","synthetic":false,"types":[]}];
implementors["http"] = [{"text":"impl FromStr for HeaderName","synthetic":false,"types":[]},{"text":"impl FromStr for HeaderValue","synthetic":false,"types":[]},{"text":"impl FromStr for Method","synthetic":false,"types":[]},{"text":"impl FromStr for StatusCode","synthetic":false,"types":[]},{"text":"impl FromStr for Authority","synthetic":false,"types":[]},{"text":"impl FromStr for PathAndQuery","synthetic":false,"types":[]},{"text":"impl FromStr for Scheme","synthetic":false,"types":[]},{"text":"impl FromStr for Uri","synthetic":false,"types":[]}];
implementors["humantime"] = [{"text":"impl FromStr for Duration","synthetic":false,"types":[]},{"text":"impl FromStr for Timestamp","synthetic":false,"types":[]}];
implementors["hyper"] = [{"text":"impl FromStr for Name","synthetic":false,"types":[]}];
implementors["ident_case"] = [{"text":"impl FromStr for RenameRule","synthetic":false,"types":[]}];
implementors["log"] = [{"text":"impl FromStr for Level","synthetic":false,"types":[]},{"text":"impl FromStr for LevelFilter","synthetic":false,"types":[]}];
implementors["mime"] = [{"text":"impl FromStr for Mime","synthetic":false,"types":[]}];
implementors["nix"] = [{"text":"impl FromStr for Signal","synthetic":false,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl FromStr for TokenStream","synthetic":false,"types":[]}];
implementors["regex"] = [{"text":"impl FromStr for Regex","synthetic":false,"types":[]},{"text":"impl FromStr for Regex","synthetic":false,"types":[]}];
implementors["semver"] = [{"text":"impl FromStr for Version","synthetic":false,"types":[]},{"text":"impl FromStr for VersionReq","synthetic":false,"types":[]}];
implementors["semver_parser"] = [{"text":"impl FromStr for Op","synthetic":false,"types":[]}];
implementors["serde_json"] = [{"text":"impl FromStr for Number","synthetic":false,"types":[]},{"text":"impl FromStr for Value","synthetic":false,"types":[]}];
implementors["termcolor"] = [{"text":"impl FromStr for Color","synthetic":false,"types":[]}];
implementors["toml"] = [{"text":"impl FromStr for Value","synthetic":false,"types":[]},{"text":"impl FromStr for Datetime","synthetic":false,"types":[]}];
implementors["unicase"] = [{"text":"impl&lt;S:&nbsp;FromStr&gt; FromStr for Ascii&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;FromStr + AsRef&lt;str&gt;&gt; FromStr for UniCase&lt;S&gt;","synthetic":false,"types":[]}];
implementors["url"] = [{"text":"impl FromStr for Url","synthetic":false,"types":[]}];
implementors["uuid"] = [{"text":"impl FromStr for Uuid","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()