(function() {var implementors = {};
implementors["arc_swap"] = [{"text":"impl&lt;T:&nbsp;Ord&gt; Ord for ConstantDeref&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Ord&gt; Ord for Constant&lt;T&gt;","synthetic":false,"types":[]}];
implementors["arrayvec"] = [{"text":"impl&lt;A:&nbsp;Array&lt;Item = u8&gt;&gt; Ord for ArrayString&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Ord&gt; Ord for CapacityError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Array&gt; Ord for ArrayVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A::Item: Ord,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["bstr"] = [{"text":"impl Ord for BString","synthetic":false,"types":[]},{"text":"impl Ord for BStr","synthetic":false,"types":[]}];
implementors["byteorder"] = [{"text":"impl Ord for BigEndian","synthetic":false,"types":[]},{"text":"impl Ord for LittleEndian","synthetic":false,"types":[]}];
implementors["bytes"] = [{"text":"impl Ord for Bytes","synthetic":false,"types":[]},{"text":"impl Ord for BytesMut","synthetic":false,"types":[]}];
implementors["bytesize"] = [{"text":"impl Ord for ByteSize","synthetic":false,"types":[]}];
implementors["cargo"] = [{"text":"impl Ord for CompileMode","synthetic":false,"types":[]},{"text":"impl Ord for CompileKind","synthetic":false,"types":[]},{"text":"impl Ord for CompileTarget","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Ord for Unit&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Ord for UnitDep&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Ord for Dependency","synthetic":false,"types":[]},{"text":"impl Ord for Kind","synthetic":false,"types":[]},{"text":"impl Ord for Edition","synthetic":false,"types":[]},{"text":"impl Ord for InternedString","synthetic":false,"types":[]},{"text":"impl Ord for LibKind","synthetic":false,"types":[]},{"text":"impl Ord for TargetKind","synthetic":false,"types":[]},{"text":"impl Ord for Target","synthetic":false,"types":[]},{"text":"impl Ord for TargetSourcePath","synthetic":false,"types":[]},{"text":"impl Ord for Package","synthetic":false,"types":[]},{"text":"impl Ord for PackageId","synthetic":false,"types":[]},{"text":"impl Ord for PackageIdSpec","synthetic":false,"types":[]},{"text":"impl Ord for ProfileRoot","synthetic":false,"types":[]},{"text":"impl Ord for Profile","synthetic":false,"types":[]},{"text":"impl Ord for Lto","synthetic":false,"types":[]},{"text":"impl Ord for PanicStrategy","synthetic":false,"types":[]},{"text":"impl Ord for UnitFor","synthetic":false,"types":[]},{"text":"impl Ord for EncodableDependency","synthetic":false,"types":[]},{"text":"impl Ord for EncodablePackageId","synthetic":false,"types":[]},{"text":"impl Ord for GitReference","synthetic":false,"types":[]},{"text":"impl Ord for SourceId","synthetic":false,"types":[]},{"text":"impl Ord for CanonicalUrl","synthetic":false,"types":[]},{"text":"impl Ord for CommandInfo","synthetic":false,"types":[]},{"text":"impl Ord for ProfilePackageSpec","synthetic":false,"types":[]}];
implementors["cargo_platform"] = [{"text":"impl Ord for CfgExpr","synthetic":false,"types":[]},{"text":"impl Ord for Cfg","synthetic":false,"types":[]},{"text":"impl Ord for Platform","synthetic":false,"types":[]}];
implementors["chrono"] = [{"text":"impl Ord for NaiveDate","synthetic":false,"types":[]},{"text":"impl Ord for IsoWeek","synthetic":false,"types":[]},{"text":"impl Ord for NaiveTime","synthetic":false,"types":[]},{"text":"impl Ord for NaiveDateTime","synthetic":false,"types":[]},{"text":"impl&lt;Tz:&nbsp;TimeZone&gt; Ord for Date&lt;Tz&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Tz:&nbsp;TimeZone&gt; Ord for DateTime&lt;Tz&gt;","synthetic":false,"types":[]}];
implementors["color_backtrace"] = [{"text":"impl Ord for Verbosity","synthetic":false,"types":[]}];
implementors["corpus_database"] = [{"text":"impl Ord for CrateHash","synthetic":false,"types":[]},{"text":"impl Ord for DefPathHash","synthetic":false,"types":[]},{"text":"impl Ord for AdtVariantIndex","synthetic":false,"types":[]},{"text":"impl Ord for TupleFieldIndex","synthetic":false,"types":[]},{"text":"impl Ord for FnParamIndex","synthetic":false,"types":[]},{"text":"impl Ord for OperandIndex","synthetic":false,"types":[]},{"text":"impl Ord for StatementIndex","synthetic":false,"types":[]},{"text":"impl Ord for CallArgIndex","synthetic":false,"types":[]},{"text":"impl Ord for Module","synthetic":false,"types":[]},{"text":"impl Ord for Item","synthetic":false,"types":[]},{"text":"impl Ord for Scope","synthetic":false,"types":[]},{"text":"impl Ord for FunctionCall","synthetic":false,"types":[]},{"text":"impl Ord for Span","synthetic":false,"types":[]},{"text":"impl Ord for Type","synthetic":false,"types":[]},{"text":"impl Ord for Field","synthetic":false,"types":[]},{"text":"impl Ord for Operand","synthetic":false,"types":[]},{"text":"impl Ord for BasicBlock","synthetic":false,"types":[]},{"text":"impl Ord for Statement","synthetic":false,"types":[]},{"text":"impl Ord for InternedString","synthetic":false,"types":[]},{"text":"impl Ord for Package","synthetic":false,"types":[]},{"text":"impl Ord for PackageVersion","synthetic":false,"types":[]},{"text":"impl Ord for Krate","synthetic":false,"types":[]},{"text":"impl Ord for Edition","synthetic":false,"types":[]},{"text":"impl Ord for Name","synthetic":false,"types":[]},{"text":"impl Ord for RelativeDefId","synthetic":false,"types":[]},{"text":"impl Ord for SummaryId","synthetic":false,"types":[]},{"text":"impl Ord for Abi","synthetic":false,"types":[]},{"text":"impl Ord for DefPath","synthetic":false,"types":[]},{"text":"impl Ord for Build","synthetic":false,"types":[]},{"text":"impl Ord for SpanFileName","synthetic":false,"types":[]},{"text":"impl Ord for CrateCfgKey","synthetic":false,"types":[]},{"text":"impl Ord for CrateCfgValue","synthetic":false,"types":[]},{"text":"impl Ord for TyKind","synthetic":false,"types":[]},{"text":"impl Ord for StatementKind","synthetic":false,"types":[]},{"text":"impl Ord for BinOp","synthetic":false,"types":[]},{"text":"impl Ord for NullOp","synthetic":false,"types":[]},{"text":"impl Ord for UnOp","synthetic":false,"types":[]},{"text":"impl Ord for TerminatorKind","synthetic":false,"types":[]},{"text":"impl Ord for Mutability","synthetic":false,"types":[]},{"text":"impl Ord for Constness","synthetic":false,"types":[]},{"text":"impl Ord for Visibility","synthetic":false,"types":[]},{"text":"impl Ord for TyVisibility","synthetic":false,"types":[]},{"text":"impl Ord for Unsafety","synthetic":false,"types":[]},{"text":"impl Ord for ImplPolarity","synthetic":false,"types":[]},{"text":"impl Ord for ScopeSafety","synthetic":false,"types":[]},{"text":"impl Ord for AdtKind","synthetic":false,"types":[]},{"text":"impl Ord for TyPrimitive","synthetic":false,"types":[]},{"text":"impl Ord for TyDefKind","synthetic":false,"types":[]},{"text":"impl Ord for Defaultness","synthetic":false,"types":[]},{"text":"impl Ord for OperandKind","synthetic":false,"types":[]},{"text":"impl Ord for AggregateKind","synthetic":false,"types":[]},{"text":"impl Ord for CastKind","synthetic":false,"types":[]},{"text":"impl Ord for BorrowKind","synthetic":false,"types":[]},{"text":"impl Ord for BasicBlockKind","synthetic":false,"types":[]},{"text":"impl Ord for SpanExpansionKind","synthetic":false,"types":[]},{"text":"impl Ord for BlockCheckMode","synthetic":false,"types":[]}];
implementors["crossbeam_epoch"] = [{"text":"impl&lt;'g, T&gt; Ord for Shared&lt;'g, T&gt;","synthetic":false,"types":[]}];
implementors["darling_core"] = [{"text":"impl Ord for IdentString","synthetic":false,"types":[]}];
implementors["either"] = [{"text":"impl&lt;L:&nbsp;Ord, R:&nbsp;Ord&gt; Ord for Either&lt;L, R&gt;","synthetic":false,"types":[]}];
implementors["filetime"] = [{"text":"impl Ord for FileTime","synthetic":false,"types":[]}];
implementors["findshlibs"] = [{"text":"impl Ord for Svma","synthetic":false,"types":[]},{"text":"impl Ord for Avma","synthetic":false,"types":[]},{"text":"impl Ord for Bias","synthetic":false,"types":[]}];
implementors["futures_util"] = [{"text":"impl&lt;T:&nbsp;Ord&gt; Ord for AllowStdIo&lt;T&gt;","synthetic":false,"types":[]}];
implementors["gimli"] = [{"text":"impl Ord for Register","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Ord&gt; Ord for DebugInfoOffset&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Ord&gt; Ord for DebugTypesOffset&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Ord&gt; Ord for UnitSectionOffset&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Ord for SectionId","synthetic":false,"types":[]},{"text":"impl Ord for DwUt","synthetic":false,"types":[]},{"text":"impl Ord for DwCfa","synthetic":false,"types":[]},{"text":"impl Ord for DwChildren","synthetic":false,"types":[]},{"text":"impl Ord for DwTag","synthetic":false,"types":[]},{"text":"impl Ord for DwAt","synthetic":false,"types":[]},{"text":"impl Ord for DwForm","synthetic":false,"types":[]},{"text":"impl Ord for DwAte","synthetic":false,"types":[]},{"text":"impl Ord for DwLle","synthetic":false,"types":[]},{"text":"impl Ord for DwDs","synthetic":false,"types":[]},{"text":"impl Ord for DwEnd","synthetic":false,"types":[]},{"text":"impl Ord for DwAccess","synthetic":false,"types":[]},{"text":"impl Ord for DwVis","synthetic":false,"types":[]},{"text":"impl Ord for DwVirtuality","synthetic":false,"types":[]},{"text":"impl Ord for DwLang","synthetic":false,"types":[]},{"text":"impl Ord for DwAddr","synthetic":false,"types":[]},{"text":"impl Ord for DwId","synthetic":false,"types":[]},{"text":"impl Ord for DwCc","synthetic":false,"types":[]},{"text":"impl Ord for DwInl","synthetic":false,"types":[]},{"text":"impl Ord for DwOrd","synthetic":false,"types":[]},{"text":"impl Ord for DwDsc","synthetic":false,"types":[]},{"text":"impl Ord for DwIdx","synthetic":false,"types":[]},{"text":"impl Ord for DwDefaulted","synthetic":false,"types":[]},{"text":"impl Ord for DwLns","synthetic":false,"types":[]},{"text":"impl Ord for DwLne","synthetic":false,"types":[]},{"text":"impl Ord for DwLnct","synthetic":false,"types":[]},{"text":"impl Ord for DwMacro","synthetic":false,"types":[]},{"text":"impl Ord for DwRle","synthetic":false,"types":[]},{"text":"impl Ord for DwOp","synthetic":false,"types":[]},{"text":"impl Ord for DwEhPe","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy + Ord&gt; Ord for ArangeEntry&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Ord for ColumnType","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Ord&gt; Ord for UnitOffset&lt;T&gt;","synthetic":false,"types":[]}];
implementors["git2"] = [{"text":"impl Ord for Sort","synthetic":false,"types":[]},{"text":"impl Ord for CredentialType","synthetic":false,"types":[]},{"text":"impl Ord for IndexEntryFlag","synthetic":false,"types":[]},{"text":"impl Ord for IndexEntryExtendedFlag","synthetic":false,"types":[]},{"text":"impl Ord for IndexAddOption","synthetic":false,"types":[]},{"text":"impl Ord for RepositoryOpenFlags","synthetic":false,"types":[]},{"text":"impl Ord for RevparseMode","synthetic":false,"types":[]},{"text":"impl Ord for MergeAnalysis","synthetic":false,"types":[]},{"text":"impl Ord for MergePreference","synthetic":false,"types":[]},{"text":"impl Ord for Oid","synthetic":false,"types":[]},{"text":"impl&lt;'repo&gt; Ord for Reference&lt;'repo&gt;","synthetic":false,"types":[]},{"text":"impl Ord for Time","synthetic":false,"types":[]},{"text":"impl Ord for IndexTime","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Ord for TreeEntry&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Ord for Status","synthetic":false,"types":[]},{"text":"impl Ord for RepositoryInitMode","synthetic":false,"types":[]},{"text":"impl Ord for SubmoduleStatus","synthetic":false,"types":[]},{"text":"impl Ord for PathspecFlags","synthetic":false,"types":[]},{"text":"impl Ord for CheckoutNotificationType","synthetic":false,"types":[]},{"text":"impl Ord for DiffStatsFormat","synthetic":false,"types":[]},{"text":"impl Ord for StashApplyFlags","synthetic":false,"types":[]},{"text":"impl Ord for StashFlags","synthetic":false,"types":[]},{"text":"impl Ord for AttrCheckFlags","synthetic":false,"types":[]}];
implementors["glob"] = [{"text":"impl Ord for Pattern","synthetic":false,"types":[]},{"text":"impl Ord for MatchOptions","synthetic":false,"types":[]}];
implementors["goblin"] = [{"text":"impl Ord for Register","synthetic":false,"types":[]}];
implementors["http"] = [{"text":"impl Ord for HeaderValue","synthetic":false,"types":[]},{"text":"impl Ord for StatusCode","synthetic":false,"types":[]},{"text":"impl Ord for Version","synthetic":false,"types":[]}];
implementors["im_rc"] = [{"text":"impl&lt;K, V&gt; Ord for OrdMap&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Ord,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Ord,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Ord&gt; Ord for OrdSet&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;K, V, S&gt; Ord for HashMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Hash + Eq + Ord + Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Ord + Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: BuildHasher,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;A, S&gt; Ord for HashSet&lt;A, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Hash + Eq + Clone + Ord,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: BuildHasher + Default,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone + Ord&gt; Ord for Vector&lt;A&gt;","synthetic":false,"types":[]}];
implementors["log"] = [{"text":"impl Ord for Level","synthetic":false,"types":[]},{"text":"impl Ord for LevelFilter","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Ord for Metadata&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Ord for MetadataBuilder&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["mime"] = [{"text":"impl&lt;'a&gt; Ord for Name&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Ord for Mime","synthetic":false,"types":[]}];
implementors["mio"] = [{"text":"impl Ord for PollOpt","synthetic":false,"types":[]},{"text":"impl Ord for Ready","synthetic":false,"types":[]},{"text":"impl Ord for UnixReady","synthetic":false,"types":[]},{"text":"impl Ord for Token","synthetic":false,"types":[]}];
implementors["nix"] = [{"text":"impl Ord for AtFlags","synthetic":false,"types":[]},{"text":"impl Ord for OFlag","synthetic":false,"types":[]},{"text":"impl Ord for SealFlag","synthetic":false,"types":[]},{"text":"impl Ord for FdFlag","synthetic":false,"types":[]},{"text":"impl Ord for SpliceFFlags","synthetic":false,"types":[]},{"text":"impl Ord for FallocateFlags","synthetic":false,"types":[]},{"text":"impl Ord for ModuleInitFlags","synthetic":false,"types":[]},{"text":"impl Ord for DeleteModuleFlags","synthetic":false,"types":[]},{"text":"impl Ord for MsFlags","synthetic":false,"types":[]},{"text":"impl Ord for MntFlags","synthetic":false,"types":[]},{"text":"impl Ord for MQ_OFlag","synthetic":false,"types":[]},{"text":"impl Ord for FdFlag","synthetic":false,"types":[]},{"text":"impl Ord for InterfaceFlags","synthetic":false,"types":[]},{"text":"impl Ord for PollFlags","synthetic":false,"types":[]},{"text":"impl Ord for CloneFlags","synthetic":false,"types":[]},{"text":"impl Ord for AioFsyncMode","synthetic":false,"types":[]},{"text":"impl Ord for LioOpcode","synthetic":false,"types":[]},{"text":"impl Ord for LioMode","synthetic":false,"types":[]},{"text":"impl Ord for EpollFlags","synthetic":false,"types":[]},{"text":"impl Ord for EpollCreateFlags","synthetic":false,"types":[]},{"text":"impl Ord for EfdFlags","synthetic":false,"types":[]},{"text":"impl Ord for MemFdCreateFlag","synthetic":false,"types":[]},{"text":"impl Ord for ProtFlags","synthetic":false,"types":[]},{"text":"impl Ord for MapFlags","synthetic":false,"types":[]},{"text":"impl Ord for MmapAdvise","synthetic":false,"types":[]},{"text":"impl Ord for MsFlags","synthetic":false,"types":[]},{"text":"impl Ord for MlockAllFlags","synthetic":false,"types":[]},{"text":"impl Ord for Request","synthetic":false,"types":[]},{"text":"impl Ord for Event","synthetic":false,"types":[]},{"text":"impl Ord for Options","synthetic":false,"types":[]},{"text":"impl Ord for QuotaType","synthetic":false,"types":[]},{"text":"impl Ord for QuotaFmt","synthetic":false,"types":[]},{"text":"impl Ord for QuotaValidFlags","synthetic":false,"types":[]},{"text":"impl Ord for RebootMode","synthetic":false,"types":[]},{"text":"impl Ord for Signal","synthetic":false,"types":[]},{"text":"impl Ord for SaFlags","synthetic":false,"types":[]},{"text":"impl Ord for SigmaskHow","synthetic":false,"types":[]},{"text":"impl Ord for SfdFlags","synthetic":false,"types":[]},{"text":"impl Ord for SockFlag","synthetic":false,"types":[]},{"text":"impl Ord for MsgFlags","synthetic":false,"types":[]},{"text":"impl Ord for SFlag","synthetic":false,"types":[]},{"text":"impl Ord for Mode","synthetic":false,"types":[]},{"text":"impl Ord for FsFlags","synthetic":false,"types":[]},{"text":"impl Ord for BaudRate","synthetic":false,"types":[]},{"text":"impl Ord for SetArg","synthetic":false,"types":[]},{"text":"impl Ord for FlushArg","synthetic":false,"types":[]},{"text":"impl Ord for FlowArg","synthetic":false,"types":[]},{"text":"impl Ord for SpecialCharacterIndices","synthetic":false,"types":[]},{"text":"impl Ord for InputFlags","synthetic":false,"types":[]},{"text":"impl Ord for OutputFlags","synthetic":false,"types":[]},{"text":"impl Ord for ControlFlags","synthetic":false,"types":[]},{"text":"impl Ord for LocalFlags","synthetic":false,"types":[]},{"text":"impl Ord for TimeSpec","synthetic":false,"types":[]},{"text":"impl Ord for TimeVal","synthetic":false,"types":[]},{"text":"impl Ord for WaitPidFlag","synthetic":false,"types":[]},{"text":"impl Ord for AddWatchFlags","synthetic":false,"types":[]},{"text":"impl Ord for InitFlags","synthetic":false,"types":[]},{"text":"impl Ord for WatchDescriptor","synthetic":false,"types":[]},{"text":"impl Ord for AccessFlags","synthetic":false,"types":[]}];
implementors["openssl"] = [{"text":"impl Ord for BigNumRef","synthetic":false,"types":[]},{"text":"impl Ord for BigNum","synthetic":false,"types":[]},{"text":"impl Ord for CMSOptions","synthetic":false,"types":[]},{"text":"impl Ord for OcspFlag","synthetic":false,"types":[]},{"text":"impl Ord for Pkcs7Flags","synthetic":false,"types":[]},{"text":"impl Ord for SslOptions","synthetic":false,"types":[]},{"text":"impl Ord for SslMode","synthetic":false,"types":[]},{"text":"impl Ord for SslVerifyMode","synthetic":false,"types":[]},{"text":"impl Ord for SslSessionCacheMode","synthetic":false,"types":[]},{"text":"impl Ord for ExtensionContext","synthetic":false,"types":[]},{"text":"impl Ord for ShutdownState","synthetic":false,"types":[]},{"text":"impl Ord for X509CheckFlags","synthetic":false,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl Ord for Ident","synthetic":false,"types":[]}];
implementors["regex_syntax"] = [{"text":"impl Ord for Span","synthetic":false,"types":[]},{"text":"impl Ord for Position","synthetic":false,"types":[]},{"text":"impl Ord for Literal","synthetic":false,"types":[]},{"text":"impl Ord for ClassUnicodeRange","synthetic":false,"types":[]},{"text":"impl Ord for ClassBytesRange","synthetic":false,"types":[]},{"text":"impl Ord for Utf8Sequence","synthetic":false,"types":[]},{"text":"impl Ord for Utf8Range","synthetic":false,"types":[]}];
implementors["semver"] = [{"text":"impl Ord for Identifier","synthetic":false,"types":[]},{"text":"impl Ord for Version","synthetic":false,"types":[]},{"text":"impl Ord for VersionReq","synthetic":false,"types":[]}];
implementors["signal_hook_registry"] = [{"text":"impl Ord for SigId","synthetic":false,"types":[]}];
implementors["sized_chunks"] = [{"text":"impl&lt;A, T&gt; Ord for InlineArray&lt;A, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Ord,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, A:&nbsp;Ord + 'a, N:&nbsp;ChunkLength&lt;A&gt; + 'a&gt; Ord for Slice&lt;'a, A, N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, A:&nbsp;Ord + 'a, N:&nbsp;ChunkLength&lt;A&gt; + 'a&gt; Ord for SliceMut&lt;'a, A, N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Ord, N:&nbsp;ChunkLength&lt;A&gt;&gt; Ord for RingBuffer&lt;A, N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A, N&gt; Ord for Chunk&lt;A, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Ord,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: ChunkLength&lt;A&gt;,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["smallvec"] = [{"text":"impl&lt;A:&nbsp;Array&gt; Ord for SmallVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A::Item: Ord,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["string"] = [{"text":"impl&lt;T:&nbsp;Ord&gt; Ord for String&lt;T&gt;","synthetic":false,"types":[]}];
implementors["syn"] = [{"text":"impl Ord for Lifetime","synthetic":false,"types":[]}];
implementors["time"] = [{"text":"impl Ord for Duration","synthetic":false,"types":[]},{"text":"impl Ord for Timespec","synthetic":false,"types":[]},{"text":"impl Ord for SteadyTime","synthetic":false,"types":[]},{"text":"impl Ord for Tm","synthetic":false,"types":[]}];
implementors["tokio_codec"] = [{"text":"impl Ord for BytesCodec","synthetic":false,"types":[]},{"text":"impl Ord for LinesCodec","synthetic":false,"types":[]}];
implementors["tokio_io"] = [{"text":"impl&lt;T:&nbsp;Ord&gt; Ord for AllowStdIo&lt;T&gt;","synthetic":false,"types":[]}];
implementors["tokio_util"] = [{"text":"impl Ord for BytesCodec","synthetic":false,"types":[]},{"text":"impl Ord for LinesCodec","synthetic":false,"types":[]}];
implementors["toml"] = [{"text":"impl&lt;T:&nbsp;Ord&gt; Ord for Spanned&lt;T&gt;","synthetic":false,"types":[]}];
implementors["typenum"] = [{"text":"impl Ord for B0","synthetic":false,"types":[]},{"text":"impl Ord for B1","synthetic":false,"types":[]},{"text":"impl&lt;U:&nbsp;Ord + Unsigned + NonZero&gt; Ord for PInt&lt;U&gt;","synthetic":false,"types":[]},{"text":"impl&lt;U:&nbsp;Ord + Unsigned + NonZero&gt; Ord for NInt&lt;U&gt;","synthetic":false,"types":[]},{"text":"impl Ord for Z0","synthetic":false,"types":[]},{"text":"impl Ord for UTerm","synthetic":false,"types":[]},{"text":"impl&lt;U:&nbsp;Ord, B:&nbsp;Ord&gt; Ord for UInt&lt;U, B&gt;","synthetic":false,"types":[]},{"text":"impl Ord for ATerm","synthetic":false,"types":[]},{"text":"impl&lt;V:&nbsp;Ord, A:&nbsp;Ord&gt; Ord for TArr&lt;V, A&gt;","synthetic":false,"types":[]},{"text":"impl Ord for Greater","synthetic":false,"types":[]},{"text":"impl Ord for Less","synthetic":false,"types":[]},{"text":"impl Ord for Equal","synthetic":false,"types":[]}];
implementors["unicase"] = [{"text":"impl&lt;T:&nbsp;AsRef&lt;str&gt;&gt; Ord for Ascii&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;AsRef&lt;str&gt;&gt; Ord for UniCase&lt;T&gt;","synthetic":false,"types":[]}];
implementors["unicode_bidi"] = [{"text":"impl Ord for Level","synthetic":false,"types":[]}];
implementors["url"] = [{"text":"impl&lt;S:&nbsp;Ord&gt; Ord for Host&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl Ord for Url","synthetic":false,"types":[]}];
implementors["uuid"] = [{"text":"impl Ord for Hyphenated","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Ord for HyphenatedRef&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Ord for Simple","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Ord for SimpleRef&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Ord for Urn","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Ord for UrnRef&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Ord for Expected","synthetic":false,"types":[]},{"text":"impl Ord for ParseError","synthetic":false,"types":[]},{"text":"impl Ord for BytesError","synthetic":false,"types":[]},{"text":"impl Ord for Error","synthetic":false,"types":[]},{"text":"impl Ord for Uuid","synthetic":false,"types":[]}];
implementors["vec_map"] = [{"text":"impl&lt;V:&nbsp;Ord&gt; Ord for VecMap&lt;V&gt;","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()