(function() {var implementors = {};
implementors["futures_util"] = [{"text":"impl&lt;Fut&gt; FusedFuture for Flatten&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Future,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut::Output: Future,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Fut:&nbsp;Future&gt; FusedFuture for Fuse&lt;Fut&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Fut, F, T&gt; FusedFuture for Map&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Future,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: FnOnce(Fut::Output) -&gt; T,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Fut1, Fut2, F&gt; FusedFuture for Then&lt;Fut1, Fut2, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Future,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Future,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: FnOnce(Fut1::Output) -&gt; Fut2,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Fut, F&gt; FusedFuture for Inspect&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: FusedFuture,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: FnOnce(&amp;Fut::Output),&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Fut:&nbsp;FusedFuture&gt; FusedFuture for UnitError&lt;Fut&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Fut:&nbsp;FusedFuture&gt; FusedFuture for NeverError&lt;Fut&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Fut&gt; FusedFuture for Shared&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Future,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut::Output: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Fut1, Fut2, F&gt; FusedFuture for AndThen&lt;Fut1, Fut2, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: TryFuture,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: TryFuture&lt;Error = Fut1::Error&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: FnOnce(Fut1::Ok) -&gt; Fut2,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Fut, E&gt; FusedFuture for ErrInto&lt;Fut, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: TryFuture + FusedFuture,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut::Error: Into&lt;E&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Fut, F&gt; FusedFuture for InspectOk&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: TryFuture + FusedFuture,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: FnOnce(&amp;Fut::Ok),&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Fut, F&gt; FusedFuture for InspectErr&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: TryFuture + FusedFuture,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: FnOnce(&amp;Fut::Error),&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Fut:&nbsp;TryFuture + FusedFuture&gt; FusedFuture for IntoFuture&lt;Fut&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Fut, F, E&gt; FusedFuture for MapErr&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: TryFuture,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: FnOnce(Fut::Error) -&gt; E,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Fut, F, T&gt; FusedFuture for MapOk&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: TryFuture,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: FnOnce(Fut::Ok) -&gt; T,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Fut1, Fut2, F&gt; FusedFuture for OrElse&lt;Fut1, Fut2, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: TryFuture,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: TryFuture&lt;Ok = Fut1::Ok&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: FnOnce(Fut1::Error) -&gt; Fut2,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Fut, F&gt; FusedFuture for UnwrapOrElse&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: TryFuture,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: FnOnce(Fut::Error) -&gt; Fut::Ok,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;F, R&gt; FusedFuture for Lazy&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: FnOnce(&amp;mut Context&lt;'_&gt;) -&gt; R,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; FusedFuture for Pending&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Fut:&nbsp;Future&gt; FusedFuture for MaybeDone&lt;Fut&gt;","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;FusedFuture&gt; FusedFuture for OptionFuture&lt;F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; FusedFuture for Ready&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Fut1:&nbsp;FusedFuture, Fut2:&nbsp;FusedFuture&gt; FusedFuture for Join&lt;Fut1, Fut2&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Fut1:&nbsp;FusedFuture, Fut2:&nbsp;FusedFuture, Fut3:&nbsp;FusedFuture&gt; FusedFuture for Join3&lt;Fut1, Fut2, Fut3&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Fut1:&nbsp;FusedFuture, Fut2:&nbsp;FusedFuture, Fut3:&nbsp;FusedFuture, Fut4:&nbsp;FusedFuture&gt; FusedFuture for Join4&lt;Fut1, Fut2, Fut3, Fut4&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Fut1:&nbsp;FusedFuture, Fut2:&nbsp;FusedFuture, Fut3:&nbsp;FusedFuture, Fut4:&nbsp;FusedFuture, Fut5:&nbsp;FusedFuture&gt; FusedFuture for Join5&lt;Fut1, Fut2, Fut3, Fut4, Fut5&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A, B&gt; FusedFuture for Select&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Future + Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Future + Unpin,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;A, B&gt; FusedFuture for Either&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: FusedFuture,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: FusedFuture&lt;Output = A::Output&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;St, C&gt; FusedFuture for Collect&lt;St, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: FusedStream,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Default + Extend&lt;St::Item&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;St&gt; FusedFuture for Concat&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: FusedStream,<br>&nbsp;&nbsp;&nbsp;&nbsp;St::Item: Extend&lt;&lt;St::Item as IntoIterator&gt;::Item&gt; + IntoIterator + Default,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;St, Fut, T, F&gt; FusedFuture for Fold&lt;St, Fut, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Stream,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: FnMut(T, St::Item) -&gt; Fut,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Future&lt;Output = T&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;St, Fut, F&gt; FusedFuture for ForEach&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: FusedStream,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: FnMut(St::Item) -&gt; Fut,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Future&lt;Output = ()&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;St:&nbsp;Stream + Unpin&gt; FusedFuture for StreamFuture&lt;St&gt;","synthetic":false,"types":[]},{"text":"impl&lt;St:&nbsp;?Sized + FusedStream + Unpin, '_&gt; FusedFuture for Next&lt;'_, St&gt;","synthetic":false,"types":[]},{"text":"impl&lt;St:&nbsp;?Sized + FusedStream + Unpin, '_&gt; FusedFuture for SelectNextSome&lt;'_, St&gt;","synthetic":false,"types":[]},{"text":"impl&lt;St, Fut, F&gt; FusedFuture for ForEachConcurrent&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Stream,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: FnMut(St::Item) -&gt; Fut,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Future&lt;Output = ()&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;St:&nbsp;?Sized + TryStream + Unpin + FusedStream, '_&gt; FusedFuture for TryNext&lt;'_, St&gt;","synthetic":false,"types":[]},{"text":"impl&lt;St, C&gt; FusedFuture for TryCollect&lt;St, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: TryStream + FusedStream,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Default + Extend&lt;St::Ok&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;St, Fut, T, F&gt; FusedFuture for TryFold&lt;St, Fut, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: TryStream,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: FnMut(T, St::Ok) -&gt; Fut,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: TryFuture&lt;Ok = T, Error = St::Error&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;St, Fut, F&gt; FusedFuture for TryForEachConcurrent&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: TryStream,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: FnMut(St::Ok) -&gt; Fut,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Future&lt;Output = Result&lt;(), St::Error&gt;&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized, '_&gt; FusedFuture for MutexLockFuture&lt;'_, T&gt;","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()